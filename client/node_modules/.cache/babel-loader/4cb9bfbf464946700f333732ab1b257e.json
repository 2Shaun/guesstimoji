{"ast":null,"code":"var _jsxFileName = \"/guesstimoji/client/src/pages/home/home.page.js\";\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom'; // boards is a map where the key is name\n// it returns an object of {data, preview}\n\nimport boards, { boardNames, smileys } from '../../boards';\nimport socket from '../../socketlocal'; //import socket from '../../socket';\n\nimport '../../index.css';\nconst smiley = smileys[Math.floor(Math.random() * smileys.length)];\nconst title = \"GUESSTIM\" + smiley + \"JI\";\n\nconst Container = props => {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 9\n    }\n  }, title), /*#__PURE__*/React.createElement(RoomTextBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }\n  }));\n};\n\nfunction makeid(length) {\n  var result = '';\n  var characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  return result;\n}\n\nconst RoomTextBox = props => {\n  const [roomVal, setRoomVal] = useState(makeid(5));\n  const [board, setBoard] = useState(boards.get(boardNames[1]).data);\n\n  const handleBoardClick = i => {\n    setBoard(boards.get(boardNames[i]).data); //console.log(`set board to ${}`);\n  }; // if this causes the textbox to rerender every keystroke\n  // there's no way I can socket.emit on that\n  // however\n  // if I am emitting the board (which I think I have to for custom boards)\n  // I will have to emit roomVal to associate board with room\n\n\n  const handleChange = event => {\n    const newRoom = event.target.value;\n    setRoomVal(newRoom);\n  }; // handleClick will be in JoinButton, a child of RoomTextBox\n  // it will pull from newRoom val and board\n\n\n  const handleClick = () => {\n    console.log(`board ${board}`);\n    socket.emit(`joinRoom`, {\n      board: board,\n      room: roomVal\n    });\n  };\n  /*\n  return(\n      <div>\n          <input value={roomVal} onChange={handleChange} />\n          <Link to={`/game?room=${roomVal}`} >\n              <button \n        className=\"join\"\n        >\n          Join Room\n        </button>\n        </Link>\n      </div>\n  );\n  */\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    align: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }\n  }, \"Room ID:\", /*#__PURE__*/React.createElement(\"input\", {\n    value: roomVal,\n    onChange: handleChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Link, {\n    to: {\n      pathname: `/game`,\n      state: {\n        roomVal: roomVal,\n        board: board\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(JoinRoom, {\n    onClick: handleClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(BoardSelect, {\n    onClick: handleBoardClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 13\n    }\n  }));\n};\n\nconst JoinRoom = props => {\n  return /*#__PURE__*/React.createElement(\"button\", {\n    id: \"board-select-button\",\n    onClick: () => {\n      props.onClick();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, \"PLAYAY\");\n};\n\nconst BoardSelect = props => {\n  const renderBoardPreview = i => {\n    return /*#__PURE__*/React.createElement(BoardPreview, {\n      i: i,\n      onClick: props.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }\n  }, \"Select Board\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"board-select\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, renderBoardPreview(1), renderBoardPreview(2), renderBoardPreview(3), renderBoardPreview(4), renderBoardPreview(5), renderBoardPreview(6), renderBoardPreview(7), renderBoardPreview(0)));\n};\n\nconst BoardPreview = props => {\n  // might be able to create an outer onClick function in here\n  // which modifies look of board preview\n  // and calls the props.onClick\n  const boardName = boardNames[props.i];\n  const preview = boards.get(boardName).preview;\n\n  if (props.i == 1) {\n    return /*#__PURE__*/React.createElement(\"button\", {\n      id: \"board-select-button\",\n      onClick: () => props.onClick(props.i),\n      autoFocus: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }\n    }, boardName, /*#__PURE__*/React.createElement(\"br\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 24\n      }\n    }), preview);\n  }\n\n  return /*#__PURE__*/React.createElement(\"button\", {\n    id: \"board-select-button\",\n    onClick: () => props.onClick(props.i),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 5\n    }\n  }, boardName, /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 24\n    }\n  }), preview);\n};\n\nexport default Container;\nexport { title };","map":{"version":3,"sources":["/guesstimoji/client/src/pages/home/home.page.js"],"names":["React","useState","Link","boards","boardNames","smileys","socket","smiley","Math","floor","random","length","title","Container","props","makeid","result","characters","charactersLength","i","charAt","RoomTextBox","roomVal","setRoomVal","board","setBoard","get","data","handleBoardClick","handleChange","event","newRoom","target","value","handleClick","console","log","emit","room","pathname","state","JoinRoom","onClick","BoardSelect","renderBoardPreview","BoardPreview","boardName","preview"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n// boards is a map where the key is name\n// it returns an object of {data, preview}\nimport boards, { boardNames, smileys } from '../../boards';\nimport socket from '../../socketlocal';\n//import socket from '../../socket';\nimport '../../index.css';\n\nconst smiley = smileys[Math.floor(Math.random() * smileys.length)];\nconst title = \"GUESSTIM\"+smiley+\"JI\";\n\nconst Container = (props) => {\n\n\n\n\n    return(\n        <div>\n        <h1 align=\"center\">{title}</ h1>\n        <RoomTextBox />\n        </div>\n    );\n\n};\n\n\nfunction makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n }\n\nconst RoomTextBox = (props) => {\n    const [roomVal, setRoomVal] = useState(makeid(5));\n    const [board, setBoard] = useState(boards.get(boardNames[1]).data);\n\n    const handleBoardClick = (i) => {\n        setBoard(boards.get(boardNames[i]).data);\n        //console.log(`set board to ${}`);\n    }\n\n\n    // if this causes the textbox to rerender every keystroke\n    // there's no way I can socket.emit on that\n    // however\n    // if I am emitting the board (which I think I have to for custom boards)\n    // I will have to emit roomVal to associate board with room\n    const handleChange = (event) => {\n        const newRoom = event.target.value;\n        setRoomVal(newRoom);\n    }\n\n    // handleClick will be in JoinButton, a child of RoomTextBox\n    // it will pull from newRoom val and board\n    const handleClick = () => {\n        console.log(`board ${board}`);\n        socket.emit(`joinRoom`, {board: board, room: roomVal});\n    }\n    /*\n    return(\n        <div>\n            <input value={roomVal} onChange={handleChange} />\n            <Link to={`/game?room=${roomVal}`} >\n                <button \n          className=\"join\"\n          >\n            Join Room\n          </button>\n          </Link>\n        </div>\n    );\n    */\n\n    return(\n        <div align=\"center\">\n            Room ID:\n            <input value={roomVal} onChange={handleChange} />\n            <Link to={{\n                pathname: `/game`,\n                state: {\n                    roomVal: roomVal, \n                    board: board\n\n                }\n        }} >\n            <JoinRoom onClick={handleClick} />\n            </Link>\n            <BoardSelect onClick={handleBoardClick} />\n        </div>\n    );\n};\n\nconst JoinRoom = (props) => {\n    return(\n        <button id=\"board-select-button\"\n        onClick={() => {props.onClick()}}>\n            PLAYAY \n        </button>\n    );\n}\n\n\nconst BoardSelect = (props) => {\n    const renderBoardPreview = (i) => {\n        return( \n            <BoardPreview \n                i={i}\n                onClick={props.onClick}\n            />\n        );\n    }\n    return(\n        <div>\n        <h3>Select Board</h3>\n        <div id=\"board-select\">\n            {renderBoardPreview(1)}\n            {renderBoardPreview(2)}\n            {renderBoardPreview(3)}\n            {renderBoardPreview(4)}\n            {renderBoardPreview(5)}\n            {renderBoardPreview(6)}\n            {renderBoardPreview(7)}\n            {renderBoardPreview(0)}\n        </div>\n        </div>\n    );\n}\n\nconst BoardPreview = (props) => {\n    // might be able to create an outer onClick function in here\n    // which modifies look of board preview\n    // and calls the props.onClick\n    const boardName = boardNames[props.i];\n    const preview = boards.get(boardName).preview;\n    if ( props.i == 1){\n        return(\n        <button \n        id=\"board-select-button\"\n        onClick={() => props.onClick(props.i)}\n        autoFocus>\n            {boardName}<br />{preview}\n        </button>\n        );\n    }\n    return(\n    <button \n        id=\"board-select-button\"\n        onClick={() => props.onClick(props.i)}\n        >\n            {boardName}<br/>{preview}\n        </button>\n    );\n}\nexport default Container;\nexport {title};"]},"metadata":{},"sourceType":"module"}
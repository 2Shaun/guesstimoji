{"ast":null,"code":"import _slicedToArray from\"/home/tommy/guesstimoji2/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{Link}from'react-router-dom';// boards is a map where the key is name\n// it returns an object of {data, preview}\nimport boards,{boardNames,smileys}from'../../boards';//import socket from '../../socketlocal';\nimport socket from'../../socket';import'../../index.css';var smiley=smileys[Math.floor(Math.random()*smileys.length)];var title=\"GUESSTIM\"+smiley+\"JI\";var Container=function Container(props){return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h1\",{align:\"center\"},title),/*#__PURE__*/React.createElement(RoomTextBox,null));};function makeid(length){var result='';var characters='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';var charactersLength=characters.length;for(var i=0;i<length;i++){result+=characters.charAt(Math.floor(Math.random()*charactersLength));}return result;}var RoomTextBox=function RoomTextBox(props){var _useState=useState(makeid(5)),_useState2=_slicedToArray(_useState,2),roomVal=_useState2[0],setRoomVal=_useState2[1];var _useState3=useState(boards.get(boardNames[1]).data),_useState4=_slicedToArray(_useState3,2),board=_useState4[0],setBoard=_useState4[1];var handleBoardClick=function handleBoardClick(i){setBoard(boards.get(boardNames[i]).data);//console.log(`set board to ${}`);\n};// if this causes the textbox to rerender every keystroke\n// there's no way I can socket.emit on that\n// however\n// if I am emitting the board (which I think I have to for custom boards)\n// I will have to emit roomVal to associate board with room\nvar handleChange=function handleChange(event){var newRoom=event.target.value;setRoomVal(newRoom);};// handleClick will be in JoinButton, a child of RoomTextBox\n// it will pull from newRoom val and board\nvar handleClick=function handleClick(){console.log(\"board \".concat(board));socket.emit(\"joinRoom\",{board:board,room:roomVal});};/*\n    return(\n        <div>\n            <input value={roomVal} onChange={handleChange} />\n            <Link to={`/game?room=${roomVal}`} >\n                <button \n          className=\"join\"\n          >\n            Join Room\n          </button>\n          </Link>\n        </div>\n    );\n    */return/*#__PURE__*/React.createElement(\"div\",{align:\"center\"},\"Room ID:\",/*#__PURE__*/React.createElement(\"input\",{value:roomVal,onChange:handleChange}),/*#__PURE__*/React.createElement(Link,{to:{pathname:\"/game\",state:{roomVal:roomVal,board:board}}},/*#__PURE__*/React.createElement(JoinRoom,{onClick:handleClick})),/*#__PURE__*/React.createElement(BoardSelect,{onClick:handleBoardClick}));};var JoinRoom=function JoinRoom(props){return/*#__PURE__*/React.createElement(\"button\",{id:\"board-select-button\",onClick:function onClick(){props.onClick();}},\"PLAY\");};var BoardSelect=function BoardSelect(props){var renderBoardPreview=function renderBoardPreview(i){return/*#__PURE__*/React.createElement(BoardPreview,{i:i,onClick:props.onClick});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h3\",null,\"Select Board\"),/*#__PURE__*/React.createElement(\"div\",{id:\"board-select\"},renderBoardPreview(1),renderBoardPreview(2),renderBoardPreview(3),renderBoardPreview(4),renderBoardPreview(5),renderBoardPreview(6),renderBoardPreview(7),renderBoardPreview(0)));};var BoardPreview=function BoardPreview(props){// might be able to create an outer onClick function in here\n// which modifies look of board preview\n// and calls the props.onClick\nvar boardName=boardNames[props.i];var preview=boards.get(boardName).preview;if(props.i==1){return/*#__PURE__*/React.createElement(\"button\",{id:\"board-select-button\",onClick:function onClick(){return props.onClick(props.i);},autoFocus:true},boardName,/*#__PURE__*/React.createElement(\"br\",null),preview);}return/*#__PURE__*/React.createElement(\"button\",{id:\"board-select-button\",onClick:function onClick(){return props.onClick(props.i);}},boardName,/*#__PURE__*/React.createElement(\"br\",null),preview);};export default Container;export{title};","map":{"version":3,"sources":["/home/tommy/guesstimoji2/client/src/pages/home/home.page.js"],"names":["React","useState","Link","boards","boardNames","smileys","socket","smiley","Math","floor","random","length","title","Container","props","makeid","result","characters","charactersLength","i","charAt","RoomTextBox","roomVal","setRoomVal","get","data","board","setBoard","handleBoardClick","handleChange","event","newRoom","target","value","handleClick","console","log","emit","room","pathname","state","JoinRoom","onClick","BoardSelect","renderBoardPreview","BoardPreview","boardName","preview"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n// boards is a map where the key is name\n// it returns an object of {data, preview}\nimport boards, { boardNames, smileys } from '../../boards';\n//import socket from '../../socketlocal';\nimport socket from '../../socket';\nimport '../../index.css';\n\nconst smiley = smileys[Math.floor(Math.random() * smileys.length)];\nconst title = \"GUESSTIM\"+smiley+\"JI\";\n\nconst Container = (props) => {\n\n\n\n\n    return(\n        <div>\n        <h1 align=\"center\">{title}</ h1>\n        <RoomTextBox />\n        </div>\n    );\n\n};\n\n\nfunction makeid(length) {\n    var result           = '';\n    var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for ( var i = 0; i < length; i++ ) {\n       result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n    return result;\n }\n\nconst RoomTextBox = (props) => {\n    const [roomVal, setRoomVal] = useState(makeid(5));\n    const [board, setBoard] = useState(boards.get(boardNames[1]).data);\n\n    const handleBoardClick = (i) => {\n        setBoard(boards.get(boardNames[i]).data);\n        //console.log(`set board to ${}`);\n    }\n\n\n    // if this causes the textbox to rerender every keystroke\n    // there's no way I can socket.emit on that\n    // however\n    // if I am emitting the board (which I think I have to for custom boards)\n    // I will have to emit roomVal to associate board with room\n    const handleChange = (event) => {\n        const newRoom = event.target.value;\n        setRoomVal(newRoom);\n    }\n\n    // handleClick will be in JoinButton, a child of RoomTextBox\n    // it will pull from newRoom val and board\n    const handleClick = () => {\n        console.log(`board ${board}`);\n        socket.emit(`joinRoom`, {board: board, room: roomVal});\n    }\n    /*\n    return(\n        <div>\n            <input value={roomVal} onChange={handleChange} />\n            <Link to={`/game?room=${roomVal}`} >\n                <button \n          className=\"join\"\n          >\n            Join Room\n          </button>\n          </Link>\n        </div>\n    );\n    */\n\n    return(\n        <div align=\"center\">\n            Room ID:\n            <input value={roomVal} onChange={handleChange} />\n            <Link to={{\n                pathname: `/game`,\n                state: {\n                    roomVal: roomVal, \n                    board: board\n\n                }\n        }} >\n            <JoinRoom onClick={handleClick} />\n            </Link>\n            <BoardSelect onClick={handleBoardClick} />\n        </div>\n    );\n};\n\nconst JoinRoom = (props) => {\n    return(\n        <button id=\"board-select-button\"\n        onClick={() => {props.onClick()}}>\n            PLAY \n        </button>\n    );\n}\n\n\nconst BoardSelect = (props) => {\n    const renderBoardPreview = (i) => {\n        return( \n            <BoardPreview \n                i={i}\n                onClick={props.onClick}\n            />\n        );\n    }\n    return(\n        <div>\n        <h3>Select Board</h3>\n        <div id=\"board-select\">\n            {renderBoardPreview(1)}\n            {renderBoardPreview(2)}\n            {renderBoardPreview(3)}\n            {renderBoardPreview(4)}\n            {renderBoardPreview(5)}\n            {renderBoardPreview(6)}\n            {renderBoardPreview(7)}\n            {renderBoardPreview(0)}\n        </div>\n        </div>\n    );\n}\n\nconst BoardPreview = (props) => {\n    // might be able to create an outer onClick function in here\n    // which modifies look of board preview\n    // and calls the props.onClick\n    const boardName = boardNames[props.i];\n    const preview = boards.get(boardName).preview;\n    if ( props.i == 1){\n        return(\n        <button \n        id=\"board-select-button\"\n        onClick={() => props.onClick(props.i)}\n        autoFocus>\n            {boardName}<br />{preview}\n        </button>\n        );\n    }\n    return(\n    <button \n        id=\"board-select-button\"\n        onClick={() => props.onClick(props.i)}\n        >\n            {boardName}<br/>{preview}\n        </button>\n    );\n}\nexport default Container;\nexport {title};"]},"metadata":{},"sourceType":"module"}
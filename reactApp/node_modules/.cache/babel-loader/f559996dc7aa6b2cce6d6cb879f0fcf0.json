{"ast":null,"code":"var _jsxFileName = \"/home/tommy/guesstimoji/reactApp/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'; // import socket from \"./socket\";\n\nimport socket from './socketlocal';\nimport HomePage from './home.page';\nimport GamePage from './game/game.page';\nimport Footer from './footer';\nimport './index.css';\nimport { connect } from 'react-redux';\nimport { homePageLoaded, roomJoined } from './redux/roomSlice';\nimport { getBoards, getEmojis, addGetEmojiResponseAsBoard, graphQlPost } from './apiUtils';\nimport { gotBoards } from './redux/boardsSlice';\nimport { gotRooms } from './redux/roomsSlice'; // view layer\n// handleJoin data should have both id and board selection\n// the first argument to a component is always the props obj\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst App = ({\n  roomJoined,\n  homePageLoaded,\n  gotBoards,\n  gotRooms,\n  roomID,\n  player\n}) => {\n  _s();\n\n  useEffect(() => {\n    getBoards('{getBoards{emojis}}').then(res => res.map(x => x.emojis)).then(boards => {\n      console.log('gotBoards');\n      gotBoards(boards);\n    }).catch(err => console.error(err));\n    getEmojis({\n      group: 'Smileys & Emotion'\n    }).then(array => array.map(x => x.emoji)).then(array => homePageLoaded(array[Math.floor(Math.random() * array.length)])).catch(err => {\n      homePageLoaded('❌');\n      console.error(err);\n    });\n    socket.emit('client:rooms/roomsRequested');\n    socket.on('server:rooms/roomsResponded', rooms => {\n      console.log('rooms responded');\n      gotRooms(rooms);\n    });\n  }, []);\n  /*\n  // add boards\n  useEffect(() => {\n  getEmojis({ group: \"Animals & Nature\" }).then((arr) => addGetEmojiResponseAsBoard(arr)).then((str) => graphQlPost(str));\n  }, []);\n  */\n\n  useEffect(() => {\n    console.log('QUERY TEST:', getEmojis({\n      group: 'Animals & Nature'\n    }));\n  }, []);\n\n  const handleJoin = joinData => {\n    console.log('handleJoin -> joinData', joinData);\n    socket.emit('client:room/roomJoined', joinData);\n    socket.on('server:room/roomJoined', joinData => {\n      if (joinData) {\n        roomJoined(joinData);\n      } else {\n        return;\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    align: \"center\",\n    children: [// player should only be defined if you're in a room\n    // might wanna turn this into a switch statement\n    // page state = {home, game, find}\n    player ? /*#__PURE__*/_jsxDEV(GamePage, {\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }, this) : /*#__PURE__*/_jsxDEV(HomePage, {\n      handleJoin: handleJoin,\n      roomID: roomID,\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 9\n  }, this);\n};\n\n_s(App, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = App;\n\nconst mapStateToProps = state => ({\n  roomID: state.room.roomID,\n  player: state.room.player\n}); // actions : {type: TYPE, ...} ARE OBJECTS\n// actionCreators : (obj) => {...action, ...obj} RETURN ACTIONS\n// mapDispatchToProps will redefine actionCreators as such:\n//      actionCreator(e) = dispatch(actionCreator(e))\n// dispatch will give the new action to the reducer who can access state\n// reducers : (state, action) => state'\n// in order for Redux to wrap dispatch around roomJoined,\n// it needs to be passed as a prop\n\n\nconst mapDispatchToProps = {\n  roomJoined,\n  gotBoards,\n  gotRooms,\n  homePageLoaded\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/tommy/guesstimoji/reactApp/src/App.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","socket","HomePage","GamePage","Footer","connect","homePageLoaded","roomJoined","getBoards","getEmojis","addGetEmojiResponseAsBoard","graphQlPost","gotBoards","gotRooms","App","roomID","player","then","res","map","x","emojis","boards","console","log","catch","err","error","group","array","emoji","Math","floor","random","length","emit","on","rooms","handleJoin","joinData","mapStateToProps","state","room","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// import socket from \"./socket\";\nimport socket from './socketlocal';\nimport HomePage from './home.page';\nimport GamePage from './game/game.page';\nimport Footer from './footer';\nimport './index.css';\nimport { connect } from 'react-redux';\nimport { homePageLoaded, roomJoined } from './redux/roomSlice';\nimport {\n    getBoards,\n    getEmojis,\n    addGetEmojiResponseAsBoard,\n    graphQlPost,\n} from './apiUtils';\nimport { gotBoards } from './redux/boardsSlice';\nimport { gotRooms } from './redux/roomsSlice';\n// view layer\n\n// handleJoin data should have both id and board selection\n\n// the first argument to a component is always the props obj\nconst App = ({\n    roomJoined,\n    homePageLoaded,\n    gotBoards,\n    gotRooms,\n    roomID,\n    player,\n}) => {\n    useEffect(() => {\n        getBoards('{getBoards{emojis}}')\n            .then((res) => res.map((x) => x.emojis))\n            .then((boards) => {\n                console.log('gotBoards');\n                gotBoards(boards);\n            })\n            .catch((err) => console.error(err));\n        getEmojis({ group: 'Smileys & Emotion' })\n            .then((array) => array.map((x) => x.emoji))\n            .then((array) =>\n                homePageLoaded(array[Math.floor(Math.random() * array.length)])\n            )\n            .catch((err) => {\n                homePageLoaded('❌');\n                console.error(err);\n            });\n        socket.emit('client:rooms/roomsRequested');\n        socket.on('server:rooms/roomsResponded', (rooms) => {\n            console.log('rooms responded');\n            gotRooms(rooms);\n        });\n    }, []);\n    /*\n  // add boards\n  useEffect(() => {\n    getEmojis({ group: \"Animals & Nature\" }).then((arr) => addGetEmojiResponseAsBoard(arr)).then((str) => graphQlPost(str));\n  }, []);\n  */\n    useEffect(() => {\n        console.log('QUERY TEST:', getEmojis({ group: 'Animals & Nature' }));\n    }, []);\n    const handleJoin = (joinData) => {\n        console.log('handleJoin -> joinData', joinData);\n        socket.emit('client:room/roomJoined', joinData);\n        socket.on('server:room/roomJoined', (joinData) => {\n            if (joinData) {\n                roomJoined(joinData);\n            } else {\n                return;\n            }\n        });\n    };\n    return (\n        <div className=\"App\" align=\"center\">\n            {\n                // player should only be defined if you're in a room\n                // might wanna turn this into a switch statement\n                // page state = {home, game, find}\n                player ? (\n                    <GamePage socket={socket} />\n                ) : (\n                    <HomePage\n                        handleJoin={handleJoin}\n                        roomID={roomID}\n                        socket={socket}\n                    />\n                )\n            }\n            <Footer />\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    roomID: state.room.roomID,\n    player: state.room.player,\n});\n\n// actions : {type: TYPE, ...} ARE OBJECTS\n// actionCreators : (obj) => {...action, ...obj} RETURN ACTIONS\n// mapDispatchToProps will redefine actionCreators as such:\n//      actionCreator(e) = dispatch(actionCreator(e))\n// dispatch will give the new action to the reducer who can access state\n// reducers : (state, action) => state'\n\n// in order for Redux to wrap dispatch around roomJoined,\n// it needs to be passed as a prop\nconst mapDispatchToProps = {\n    roomJoined,\n    gotBoards,\n    gotRooms,\n    homePageLoaded,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}
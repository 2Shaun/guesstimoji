{"ast":null,"code":"var _jsxFileName = \"/home/tommy/guesstimoji/reactApp/src/game/game.page.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport RoomName from './RoomName';\nimport OpponentBoard from './OpponentBoard';\nimport Board from './Board';\nimport GameLog from './GameLog';\nimport queryString from 'query-string';\nimport socket from '../socketlocal';\nimport '../index.css';\nimport { connect, useDispatch } from 'react-redux';\nimport { turnSubmitted, cleared } from '../redux/gameLogSlice';\nimport { clicked } from '../redux/opponentBoardSlice'; //import socket from '../../socket';\n// This is the VIEW in MVC\n// props are a way of passing data from parent to child\n//      props are passed to the component\n// state is reserved for interactivity\n//      states are modified within the component\n// I can send requests with the root room\n// the response will go to the game specific room\n// I need to figure out how to pass down the values\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GamePage = ({\n  socket,\n  roomID,\n  roomFull,\n  board,\n  player,\n  gameCount,\n  winner\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (roomFull) {\n      socket.on('server:gameLog/turnSubmitted', turnData => {\n        dispatch(turnSubmitted(turnData));\n      });\n      socket.on('server:opponentBoard/clicked', index => {\n        dispatch(clicked(index));\n      });\n    } else {\n      socket.off('server:gameLog/turnSubmitted');\n      socket.off('server:opponentBoard/clicked');\n    }\n  }, [roomFull]);\n  useEffect(() => {\n    socket.on('server:gameLog/cleared', () => {\n      dispatch(cleared());\n    });\n  }, []); // make sure that you check to see if you can import socket\n  // or have to pass it as prop\n  // the empty array tells useEffect to only run once\n  // state changes in a useEffect could cause an inf loop\n\n  /*\n  useEffect(() => {\n  if(socket.room !== roomQuery ){\n    socket.emit(\"subscribe\", roomQuery);\n    console.log(`Subscribed to ${socket.room} in useEffect`);\n  }\n  });\n  */\n  // the component will be mounted if the player number is found\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(RoomName, {\n        roomID: roomID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(OpponentBoard, {\n        board: board,\n        socket: socket,\n        roomID: roomID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        board: board,\n        socket: socket,\n        roomID: roomID,\n        player: player\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GameLog, {\n        socket: socket,\n        roomID: roomID,\n        roomFull: roomFull,\n        player: player,\n        winner: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n}; // there will need to be two boards\n// I chose squares to be a state because\n// I want the user to modify the board\n// Board\n//    states\n//        squares\n// if the onClick function is going to modify squares\n// it needs to be in the scope of Board\n// thus, it needs to be a prop of square\n// this is why I am not making Board a functional component\n// TODO : learn why it is bad to define functions\n//        inside functional components\n// OpponentBoard will listen and update remotely\n// Board will emit and update locally\n// Square\n//    props\n//      value\n//      onClick\n\n\n_s(GamePage, \"AgIJcfH1H12KzRN1QiO1ExB/+eo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = GamePage;\n\nconst mapStateToProps = state => ({ ...state.room\n});\n\nconst mapDispatchToProps = {\n  turnSubmitted,\n  cleared\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["/home/tommy/guesstimoji/reactApp/src/game/game.page.js"],"names":["React","Component","useEffect","useState","RoomName","OpponentBoard","Board","GameLog","queryString","socket","connect","useDispatch","turnSubmitted","cleared","clicked","GamePage","roomID","roomFull","board","player","gameCount","winner","dispatch","on","turnData","index","off","mapStateToProps","state","room","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\nimport RoomName from './RoomName';\nimport OpponentBoard from './OpponentBoard';\nimport Board from './Board';\nimport GameLog from './GameLog';\nimport queryString from 'query-string';\nimport socket from '../socketlocal';\nimport '../index.css';\nimport { connect, useDispatch } from 'react-redux';\nimport { turnSubmitted, cleared } from '../redux/gameLogSlice';\nimport { clicked } from '../redux/opponentBoardSlice';\n//import socket from '../../socket';\n\n// This is the VIEW in MVC\n\n// props are a way of passing data from parent to child\n//      props are passed to the component\n// state is reserved for interactivity\n//      states are modified within the component\n\n// I can send requests with the root room\n// the response will go to the game specific room\n\n// I need to figure out how to pass down the values\nconst GamePage = ({\n    socket,\n    roomID,\n    roomFull,\n    board,\n    player,\n    gameCount,\n    winner,\n}) => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (roomFull) {\n            socket.on('server:gameLog/turnSubmitted', (turnData) => {\n                dispatch(turnSubmitted(turnData));\n            });\n            socket.on('server:opponentBoard/clicked', (index) => {\n                dispatch(clicked(index));\n            });\n        } else {\n            socket.off('server:gameLog/turnSubmitted');\n            socket.off('server:opponentBoard/clicked');\n        }\n    }, [roomFull]);\n    useEffect(() => {\n        socket.on('server:gameLog/cleared', () => {\n            dispatch(cleared());\n        });\n    }, []);\n\n    // make sure that you check to see if you can import socket\n    // or have to pass it as prop\n    // the empty array tells useEffect to only run once\n\n    // state changes in a useEffect could cause an inf loop\n    /*\n  useEffect(() => {\n    if(socket.room !== roomQuery ){\n      socket.emit(\"subscribe\", roomQuery);\n      console.log(`Subscribed to ${socket.room} in useEffect`);\n    }\n  });\n  */\n\n    // the component will be mounted if the player number is found\n    return (\n        <div>\n            <div>\n                <RoomName roomID={roomID} />\n                <OpponentBoard board={board} socket={socket} roomID={roomID} />\n                <Board\n                    board={board}\n                    socket={socket}\n                    roomID={roomID}\n                    player={player}\n                />\n                <GameLog\n                    socket={socket}\n                    roomID={roomID}\n                    roomFull={roomFull}\n                    player={player}\n                    winner={winner}\n                />\n                {\n                    // Need 'Leave Room' button\n                }\n            </div>\n        </div>\n    );\n};\n\n// there will need to be two boards\n// I chose squares to be a state because\n// I want the user to modify the board\n// Board\n//    states\n//        squares\n// if the onClick function is going to modify squares\n// it needs to be in the scope of Board\n// thus, it needs to be a prop of square\n// this is why I am not making Board a functional component\n// TODO : learn why it is bad to define functions\n//        inside functional components\n\n// OpponentBoard will listen and update remotely\n\n// Board will emit and update locally\n\n// Square\n//    props\n//      value\n//      onClick\n\nconst mapStateToProps = (state) => ({\n    ...state.room,\n});\n\nconst mapDispatchToProps = {\n    turnSubmitted,\n    cleared,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\n"]},"metadata":{},"sourceType":"module"}
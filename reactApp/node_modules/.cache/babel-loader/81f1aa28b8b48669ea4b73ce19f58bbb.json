{"ast":null,"code":"var _jsxFileName = \"/home/tommy/guesstimoji/reactApp/src/game/TurnHandler.js\";\nimport React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PlayerTurn from './PlayerTurn';\nimport OpponentTurn from './OpponentTurn';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TurnHandler = ({\n  socket,\n  player,\n  picked,\n  turn,\n  roomID,\n  roomFull,\n  handleSubmitTurn,\n  winner\n}) => {\n  // turn 1/2 is answering yes or no\n  // turn 2/2 is asking a question\n  // TURN CYCLE:\n  // player 2 turn 2/2  (turn 0)\n  // player 1 turn 1/2\n  // player 1 turn 2/2\n  // player 2 turn 1/2\n  const player1Turn = turn % 4 === 1 || turn % 4 === 2;\n  const player2Turn = !player1Turn;\n  const playerTurn = player === 1 && player1Turn || player === 2 && player2Turn;\n  const askingTurn = turn % 2 === 0;\n  const opponent = player % 2 + 1; // message can be populated with yes/no button or\n  // if send is available as soon as you join\n  // the gameLog room for player 2 will need to be updated when they join\n\n  if (winner) {\n    // need 'New Game' button which brings up board select for player 1\n    // need 'Waiting for Player 1 to start a new game...' for player 2\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"GAME OVER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 16\n    }, this);\n  } else if (!roomFull) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Waiting for Player 2 to join...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 16\n    }, this);\n  } else if (!picked) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 16\n    }, this);\n  } else {\n    return playerTurn ? /*#__PURE__*/_jsxDEV(PlayerTurn, {\n      handleSubmitTurn: handleSubmitTurn,\n      askingTurn: askingTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(OpponentTurn, {\n      opponent: opponent,\n      askingTurn: askingTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 13\n    }, this);\n  }\n};\n\n_c = TurnHandler;\n\nconst mapStateToProps = state => ({\n  picked: state.player\n});\n\nexport default connect(mapStateToProps, null)(TurnHandler);\n\nvar _c;\n\n$RefreshReg$(_c, \"TurnHandler\");","map":{"version":3,"sources":["/home/tommy/guesstimoji/reactApp/src/game/TurnHandler.js"],"names":["React","useEffect","useState","connect","PlayerTurn","OpponentTurn","TurnHandler","socket","player","picked","turn","roomID","roomFull","handleSubmitTurn","winner","player1Turn","player2Turn","playerTurn","askingTurn","opponent","mapStateToProps","state"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACjBC,EAAAA,MADiB;AAEjBC,EAAAA,MAFiB;AAGjBC,EAAAA,MAHiB;AAIjBC,EAAAA,IAJiB;AAKjBC,EAAAA,MALiB;AAMjBC,EAAAA,QANiB;AAOjBC,EAAAA,gBAPiB;AAQjBC,EAAAA;AARiB,CAAD,KASd;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,WAAW,GAAGL,IAAI,GAAG,CAAP,KAAa,CAAb,IAAkBA,IAAI,GAAG,CAAP,KAAa,CAAnD;AACA,QAAMM,WAAW,GAAG,CAACD,WAArB;AACA,QAAME,UAAU,GACXT,MAAM,KAAK,CAAX,IAAgBO,WAAjB,IAAkCP,MAAM,KAAK,CAAX,IAAgBQ,WADtD;AAEA,QAAME,UAAU,GAAGR,IAAI,GAAG,CAAP,KAAa,CAAhC;AACA,QAAMS,QAAQ,GAAIX,MAAM,GAAG,CAAV,GAAe,CAAhC,CAbE,CAeF;AAEA;AACA;;AACA,MAAIM,MAAJ,EAAY;AACR;AACA;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAJD,MAIO,IAAI,CAACF,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA,IAAI,CAACH,MAAL,EAAa;AAChB,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,WAAOQ,UAAU,gBACb,QAAC,UAAD;AACI,MAAA,gBAAgB,EAAEJ,gBADtB;AAEI,MAAA,UAAU,EAAEK;AAFhB;AAAA;AAAA;AAAA;AAAA,YADa,gBAMb,QAAC,YAAD;AAAc,MAAA,QAAQ,EAAEC,QAAxB;AAAkC,MAAA,UAAU,EAAED;AAA9C;AAAA;AAAA;AAAA;AAAA,YANJ;AAQH;AACJ,CA9CD;;KAAMZ,W;;AAgDN,MAAMc,eAAe,GAAIC,KAAD,KAAY;AAChCZ,EAAAA,MAAM,EAAEY,KAAK,CAACb;AADkB,CAAZ,CAAxB;;AAIA,eAAeL,OAAO,CAACiB,eAAD,EAAkB,IAAlB,CAAP,CAA+Bd,WAA/B,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PlayerTurn from './PlayerTurn';\nimport OpponentTurn from './OpponentTurn';\n\nconst TurnHandler = ({\n    socket,\n    player,\n    picked,\n    turn,\n    roomID,\n    roomFull,\n    handleSubmitTurn,\n    winner,\n}) => {\n    // turn 1/2 is answering yes or no\n    // turn 2/2 is asking a question\n    // TURN CYCLE:\n    // player 2 turn 2/2  (turn 0)\n    // player 1 turn 1/2\n    // player 1 turn 2/2\n    // player 2 turn 1/2\n    const player1Turn = turn % 4 === 1 || turn % 4 === 2;\n    const player2Turn = !player1Turn;\n    const playerTurn =\n        (player === 1 && player1Turn) || (player === 2 && player2Turn);\n    const askingTurn = turn % 2 === 0;\n    const opponent = (player % 2) + 1;\n\n    // message can be populated with yes/no button or\n\n    // if send is available as soon as you join\n    // the gameLog room for player 2 will need to be updated when they join\n    if (winner) {\n        // need 'New Game' button which brings up board select for player 1\n        // need 'Waiting for Player 1 to start a new game...' for player 2\n        return <div>GAME OVER</div>;\n    } else if (!roomFull) {\n        return <div>Waiting for Player 2 to join...</div>;\n    } else if (!picked) {\n        return <div></div>;\n    } else {\n        return playerTurn ? (\n            <PlayerTurn\n                handleSubmitTurn={handleSubmitTurn}\n                askingTurn={askingTurn}\n            />\n        ) : (\n            <OpponentTurn opponent={opponent} askingTurn={askingTurn} />\n        );\n    }\n};\n\nconst mapStateToProps = (state) => ({\n    picked: state.player,\n});\n\nexport default connect(mapStateToProps, null)(TurnHandler);\n"]},"metadata":{},"sourceType":"module"}
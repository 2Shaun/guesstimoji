{"ast":null,"code":"var _jsxFileName = \"/home/tommy/guesstimoji/reactApp/src/game/GameLog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport TurnHandler from './TurnHandler';\nimport { connect, useDispatch } from 'react-redux';\nimport { turnSubmitted } from '../redux/gameLogSlice';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst GameLog = ({\n  socket,\n  roomID,\n  roomFull,\n  gameLog,\n  player,\n  winner\n}) => {\n  _s();\n\n  const opponent = player % 2 + 1;\n  console.log('GameLog -> player', player);\n  console.log('GameLog -> opponent', opponent);\n  const dispatch = useDispatch();\n\n  const handleSubmitTurn = untrimmedMessage => {\n    const message = untrimmedMessage.trim();\n    socket.emit('client:gameLog/turnSubmitted', {\n      player: player,\n      message: message\n    });\n    dispatch(turnSubmitted({\n      username: 'You',\n      message: message\n    }));\n  };\n\n  const renderGameLog = () => {\n    // the second argument of map is optional, takes in the index\n    // of the element\n    // don't use curly brace tuples that don't have tags!!\n    return gameLog.map(({\n      username: username,\n      message: message\n    }, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      class: i === 0 ? 'game-log-last-message' : 'game-log-message',\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: username + ':'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 17\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 13\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TurnHandler, {\n      socket: socket,\n      player: player,\n      turn: gameLog.length,\n      roomID: roomID,\n      roomFull: roomFull,\n      handleSubmitTurn: handleSubmitTurn,\n      winner: winner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"game-log-box\",\n      children: renderGameLog()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GameLog, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = GameLog;\n\nconst mapStateToProps = state => ({\n  gameLog: state.gameLog\n});\n\nconst mapDispatchToProps = {\n  turnSubmitted\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GameLog);\n\nvar _c;\n\n$RefreshReg$(_c, \"GameLog\");","map":{"version":3,"sources":["/home/tommy/guesstimoji/reactApp/src/game/GameLog.js"],"names":["React","useEffect","useState","TurnHandler","connect","useDispatch","turnSubmitted","GameLog","socket","roomID","roomFull","gameLog","player","winner","opponent","console","log","dispatch","handleSubmitTurn","untrimmedMessage","message","trim","emit","username","renderGameLog","map","i","length","mapStateToProps","state","mapDispatchToProps"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,aAAT,QAA8B,uBAA9B;;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,MAAV;AAAkBC,EAAAA,QAAlB;AAA4BC,EAAAA,OAA5B;AAAqCC,EAAAA,MAArC;AAA6CC,EAAAA;AAA7C,CAAD,KAA2D;AAAA;;AACvE,QAAMC,QAAQ,GAAIF,MAAM,GAAG,CAAV,GAAe,CAAhC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,MAAjC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,QAAnC;AACA,QAAMG,QAAQ,GAAGZ,WAAW,EAA5B;;AAEA,QAAMa,gBAAgB,GAAIC,gBAAD,IAAsB;AAC3C,UAAMC,OAAO,GAAGD,gBAAgB,CAACE,IAAjB,EAAhB;AACAb,IAAAA,MAAM,CAACc,IAAP,CAAY,8BAAZ,EAA4C;AACxCV,MAAAA,MAAM,EAAEA,MADgC;AAExCQ,MAAAA,OAAO,EAAEA;AAF+B,KAA5C;AAIAH,IAAAA,QAAQ,CAACX,aAAa,CAAC;AAAEiB,MAAAA,QAAQ,EAAE,KAAZ;AAAmBH,MAAAA,OAAO,EAAEA;AAA5B,KAAD,CAAd,CAAR;AACH,GAPD;;AASA,QAAMI,aAAa,GAAG,MAAM;AACxB;AACA;AACA;AACA,WAAOb,OAAO,CAACc,GAAR,CAAY,CAAC;AAAEF,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBH,MAAAA,OAAO,EAAEA;AAA/B,KAAD,EAA2CM,CAA3C,kBACf;AACI,MAAA,KAAK,EAAEA,CAAC,KAAK,CAAN,GAAU,uBAAV,GAAoC,kBAD/C;AAAA,8BAII;AAAA,kBAAOH,QAAQ,GAAG;AAAlB;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA,kBAAOH;AAAP;AAAA;AAAA;AAAA;AAAA,cALJ;AAAA,OAESM,CAFT;AAAA;AAAA;AAAA;AAAA,YADG,CAAP;AASH,GAbD;;AAcA,sBACI;AAAA,4BACI,QAAC,WAAD;AACI,MAAA,MAAM,EAAElB,MADZ;AAEI,MAAA,MAAM,EAAEI,MAFZ;AAGI,MAAA,IAAI,EAAED,OAAO,CAACgB,MAHlB;AAII,MAAA,MAAM,EAAElB,MAJZ;AAKI,MAAA,QAAQ,EAAEC,QALd;AAMI,MAAA,gBAAgB,EAAEQ,gBANtB;AAOI,MAAA,MAAM,EAAEL;AAPZ;AAAA;AAAA;AAAA;AAAA,YADJ,eAUI;AAAK,MAAA,KAAK,EAAC,cAAX;AAAA,gBAA2BW,aAAa;AAAxC;AAAA;AAAA;AAAA;AAAA,YAVJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CA3CD;;GAAMjB,O;UAIeF,W;;;KAJfE,O;;AA6CN,MAAMqB,eAAe,GAAIC,KAAD,KAAY;AAChClB,EAAAA,OAAO,EAAEkB,KAAK,CAAClB;AADiB,CAAZ,CAAxB;;AAIA,MAAMmB,kBAAkB,GAAG;AACvBxB,EAAAA;AADuB,CAA3B;AAIA,eAAeF,OAAO,CAACwB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CvB,OAA7C,CAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport TurnHandler from './TurnHandler';\nimport { connect, useDispatch } from 'react-redux';\nimport { turnSubmitted } from '../redux/gameLogSlice';\n\nconst GameLog = ({ socket, roomID, roomFull, gameLog, player, winner }) => {\n    const opponent = (player % 2) + 1;\n    console.log('GameLog -> player', player);\n    console.log('GameLog -> opponent', opponent);\n    const dispatch = useDispatch();\n\n    const handleSubmitTurn = (untrimmedMessage) => {\n        const message = untrimmedMessage.trim();\n        socket.emit('client:gameLog/turnSubmitted', {\n            player: player,\n            message: message,\n        });\n        dispatch(turnSubmitted({ username: 'You', message: message }));\n    };\n\n    const renderGameLog = () => {\n        // the second argument of map is optional, takes in the index\n        // of the element\n        // don't use curly brace tuples that don't have tags!!\n        return gameLog.map(({ username: username, message: message }, i) => (\n            <div\n                class={i === 0 ? 'game-log-last-message' : 'game-log-message'}\n                key={i}\n            >\n                <span>{username + ':'}</span>\n                <span>{message}</span>\n            </div>\n        ));\n    };\n    return (\n        <div>\n            <TurnHandler\n                socket={socket}\n                player={player}\n                turn={gameLog.length}\n                roomID={roomID}\n                roomFull={roomFull}\n                handleSubmitTurn={handleSubmitTurn}\n                winner={winner}\n            />\n            <div class=\"game-log-box\">{renderGameLog()}</div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    gameLog: state.gameLog,\n});\n\nconst mapDispatchToProps = {\n    turnSubmitted,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameLog);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/home/tommy/guesstimoji/reactApp/src/HomePageDiv.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Select from './Select';\nimport JoinRoomButton from './JoinRoomButton';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst HomePageDiv = ({\n  boards,\n  previews,\n  rooms,\n  handleJoin,\n  roomID,\n  socket\n}) => {\n  _s();\n\n  // the idea is to hold tempBoard and tempID in component state\n  // and hold the 'real' board and 'real' id in store\n  // store id and board will be updated on PLAY\n  // this allows me to not have to connect the home page\n  // to the store\n  const [tempBoard, setTempBoard] = useState(boards ? boards[0] : null);\n  const [tempRoomID, setTempRoomID] = useState(roomID);\n\n  const handleBoardClick = i => {\n    setTempBoard(boards[i]);\n  };\n\n  const handleRoomClick = i => {\n    // join room should not require board\n    handleJoin({\n      roomID: rooms[i],\n      board: []\n    });\n  };\n\n  const handleChange = e => {\n    setTempRoomID(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    align: \"center\",\n    children: [\"Room ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      \"data-testid\": \"roomId\",\n      value: tempRoomID,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(JoinRoomButton, {\n      roomID: tempRoomID,\n      board: tempBoard,\n      handleJoin: handleJoin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      header: 'Select Board',\n      selections: previews,\n      onClick: handleBoardClick,\n      emptyMessage: 'Waiting for boards fetch... âŒ›'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      header: 'Join Room',\n      selections: rooms,\n      onClick: handleRoomClick,\n      emptyMessage: 'There are no rooms ðŸ¥º Make one or refresh!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"board-select-button\",\n      onClick: () => socket.emit('client:rooms/roomsRequested'),\n      children: \"Refresh Rooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 9\n  }, this);\n};\n\n_s(HomePageDiv, \"g7Za6g8BJ1Cag4HJM5pL2kksFnA=\");\n\n_c = HomePageDiv;\n\nconst mapStateToProps = state => ({\n  boards: state.boards.boards,\n  previews: state.boards.previews,\n  rooms: state.rooms\n});\n\nexport default connect(mapStateToProps)(HomePageDiv);\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePageDiv\");","map":{"version":3,"sources":["/home/tommy/guesstimoji/reactApp/src/HomePageDiv.js"],"names":["React","useState","Link","Select","JoinRoomButton","connect","HomePageDiv","boards","previews","rooms","handleJoin","roomID","socket","tempBoard","setTempBoard","tempRoomID","setTempRoomID","handleBoardClick","i","handleRoomClick","board","handleChange","e","target","value","emit","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACjBC,EAAAA,MADiB;AAEjBC,EAAAA,QAFiB;AAGjBC,EAAAA,KAHiB;AAIjBC,EAAAA,UAJiB;AAKjBC,EAAAA,MALiB;AAMjBC,EAAAA;AANiB,CAAD,KAOd;AAAA;;AACF;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAACM,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAT,GAAe,IAAtB,CAA1C;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAACU,MAAD,CAA5C;;AAEA,QAAMM,gBAAgB,GAAIC,CAAD,IAAO;AAC5BJ,IAAAA,YAAY,CAACP,MAAM,CAACW,CAAD,CAAP,CAAZ;AACH,GAFD;;AAIA,QAAMC,eAAe,GAAID,CAAD,IAAO;AAC3B;AACAR,IAAAA,UAAU,CAAC;AACPC,MAAAA,MAAM,EAAEF,KAAK,CAACS,CAAD,CADN;AAEPE,MAAAA,KAAK,EAAE;AAFA,KAAD,CAAV;AAIH,GAND;;AAQA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AACxBN,IAAAA,aAAa,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACH,GAFD;;AAIA,sBACI;AAAK,IAAA,KAAK,EAAC,QAAX;AAAA,wCAEI;AACI,qBAAY,QADhB;AAEI,MAAA,KAAK,EAAET,UAFX;AAGI,MAAA,QAAQ,EAAEM;AAHd;AAAA;AAAA;AAAA;AAAA,YAFJ,eAOI,QAAC,cAAD;AACI,MAAA,MAAM,EAAEN,UADZ;AAEI,MAAA,KAAK,EAAEF,SAFX;AAGI,MAAA,UAAU,EAAEH;AAHhB;AAAA;AAAA;AAAA;AAAA,YAPJ,eAYI,QAAC,MAAD;AACI,MAAA,MAAM,EAAE,cADZ;AAEI,MAAA,UAAU,EAAEF,QAFhB;AAGI,MAAA,OAAO,EAAES,gBAHb;AAII,MAAA,YAAY,EAAE;AAJlB;AAAA;AAAA;AAAA;AAAA,YAZJ,eAkBI,QAAC,MAAD;AACI,MAAA,MAAM,EAAE,WADZ;AAEI,MAAA,UAAU,EAAER,KAFhB;AAGI,MAAA,OAAO,EAAEU,eAHb;AAII,MAAA,YAAY,EAAE;AAJlB;AAAA;AAAA;AAAA;AAAA,YAlBJ,eAwBI;AACI,MAAA,EAAE,EAAC,qBADP;AAEI,MAAA,OAAO,EAAE,MAAMP,MAAM,CAACa,IAAP,CAAY,6BAAZ,CAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAxBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH,CAjED;;GAAMnB,W;;KAAAA,W;;AAmEN,MAAMoB,eAAe,GAAIC,KAAD,KAAY;AAChCpB,EAAAA,MAAM,EAAEoB,KAAK,CAACpB,MAAN,CAAaA,MADW;AAEhCC,EAAAA,QAAQ,EAAEmB,KAAK,CAACpB,MAAN,CAAaC,QAFS;AAGhCC,EAAAA,KAAK,EAAEkB,KAAK,CAAClB;AAHmB,CAAZ,CAAxB;;AAMA,eAAeJ,OAAO,CAACqB,eAAD,CAAP,CAAyBpB,WAAzB,CAAf","sourcesContent":["import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Select from './Select';\nimport JoinRoomButton from './JoinRoomButton';\nimport { connect } from 'react-redux';\n\nconst HomePageDiv = ({\n    boards,\n    previews,\n    rooms,\n    handleJoin,\n    roomID,\n    socket,\n}) => {\n    // the idea is to hold tempBoard and tempID in component state\n    // and hold the 'real' board and 'real' id in store\n    // store id and board will be updated on PLAY\n    // this allows me to not have to connect the home page\n    // to the store\n    const [tempBoard, setTempBoard] = useState(boards ? boards[0] : null);\n    const [tempRoomID, setTempRoomID] = useState(roomID);\n\n    const handleBoardClick = (i) => {\n        setTempBoard(boards[i]);\n    };\n\n    const handleRoomClick = (i) => {\n        // join room should not require board\n        handleJoin({\n            roomID: rooms[i],\n            board: [],\n        });\n    };\n\n    const handleChange = (e) => {\n        setTempRoomID(e.target.value);\n    };\n\n    return (\n        <div align=\"center\">\n            Room ID:\n            <input\n                data-testid=\"roomId\"\n                value={tempRoomID}\n                onChange={handleChange}\n            />\n            <JoinRoomButton\n                roomID={tempRoomID}\n                board={tempBoard}\n                handleJoin={handleJoin}\n            />\n            <Select\n                header={'Select Board'}\n                selections={previews}\n                onClick={handleBoardClick}\n                emptyMessage={'Waiting for boards fetch... âŒ›'}\n            />\n            <Select\n                header={'Join Room'}\n                selections={rooms}\n                onClick={handleRoomClick}\n                emptyMessage={'There are no rooms ðŸ¥º Make one or refresh!'}\n            />\n            <button\n                id=\"board-select-button\"\n                onClick={() => socket.emit('client:rooms/roomsRequested')}\n            >\n                Refresh Rooms\n            </button>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    boards: state.boards.boards,\n    previews: state.boards.previews,\n    rooms: state.rooms,\n});\n\nexport default connect(mapStateToProps)(HomePageDiv);\n"]},"metadata":{},"sourceType":"module"}
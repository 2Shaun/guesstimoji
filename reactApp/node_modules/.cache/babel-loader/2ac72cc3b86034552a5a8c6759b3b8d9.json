{"ast":null,"code":"var _jsxFileName = \"/home/tommy/guesstimoji/reactApp/src/game/Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Square from './Square';\nimport Choice from './PickTextBox';\nimport { connect } from 'react-redux';\nimport { playerPicked } from '../redux/playersSlice'; // i'm hoping that when the client socket emits a request,\n// the server will be able to extract room information\n// and access gamedata hashtable with that\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = ({\n  socket,\n  board,\n  player,\n  picked,\n  playerPicked\n}) => {\n  _s();\n\n  //const [freshBoard, setFreshBoard] = useState(easterEgg(props.room));\n  // THE INITIAL VALUE OF STATE WILL BE ASSIGNED ONLY\n  // ON THE INITIAL RENDER\n  // IN SUBSEQUENT RENDERS, THE ARGUMENT OF USESTATE\n  // WILL BE IGNORED AND THE CURRENT VALUE WILL BE\n  // RETRIEVED\n  const [pick, setPick] = useState(''); // with 2 boards, there is no reason to listen on the player's board\n  //socket.on(`setState`, (newSquares) => (setSquares(newSquares)));\n  //socket.on(`setFreshBoard`, (newFreshBoard) => (setFreshBoard(newFreshBoard)));\n\n  const handlePick = i => {\n    // saves typing this.state.\n    // can only change board if 2 players in room\n    // will need some 'original player' condition if I\n    // allow players to spectate\n    socket.emit('client:players/picked', {\n      player: player,\n      pick: board[i]\n    });\n    playerPicked();\n    setPick(board[i]);\n  }; // this is a white space char, not a space\n  // a space causes shifting of rows\n  // sends a request to server to update board on click\n  // might make it return something to synchronize events\n  // emit to everyone in room but self\n  // set square field without server\n  //socket.emit(\"newState\", { squares: newSquares });\n  //setSquares(newSquares);\n\n\n  const handleContextMenu = i => {\n    navigator.clipboard.writeText(board[i]).then(() => {\n      alert(board[i] + ' copied! Paste it in the board to guess!');\n    }, () => {\n      alert(\"Couldn't copy emoji. Invalid permissions.\");\n    });\n  };\n\n  const renderSquare = i => {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      index: i,\n      socket: socket,\n      value: board[i],\n      onClick: !picked ? () => handlePick(i) : null,\n      onContextMenu: () => {\n        handleContextMenu(i);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(0), renderSquare(1), renderSquare(2), renderSquare(3), renderSquare(4), renderSquare(5), renderSquare(6)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(7), renderSquare(8), renderSquare(9), renderSquare(10), renderSquare(11), renderSquare(12), renderSquare(13)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(14), renderSquare(15), renderSquare(16), renderSquare(17), renderSquare(18), renderSquare(19), renderSquare(20)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(21), renderSquare(22), renderSquare(23), renderSquare(24), renderSquare(25), renderSquare(26), renderSquare(27)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(28), renderSquare(29), renderSquare(30), renderSquare(31), renderSquare(32), renderSquare(33), renderSquare(34)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"text-row\",\n      children: /*#__PURE__*/_jsxDEV(Choice, {\n        pick: pick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Board, \"UkzIAVOLPB9tfCt4EI35KC9wEns=\");\n\n_c = Board;\n\nconst mapStateToProps = state => ({\n  picked: state.player\n});\n\nconst mapDispatchToProps = {\n  playerPicked\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["/home/tommy/guesstimoji/reactApp/src/game/Board.js"],"names":["React","useState","Square","Choice","connect","playerPicked","Board","socket","board","player","picked","pick","setPick","handlePick","i","emit","handleContextMenu","navigator","clipboard","writeText","then","alert","renderSquare","mapStateToProps","state","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Square from './Square';\nimport Choice from './PickTextBox';\nimport { connect } from 'react-redux';\nimport { playerPicked } from '../redux/playersSlice';\n\n// i'm hoping that when the client socket emits a request,\n// the server will be able to extract room information\n// and access gamedata hashtable with that\nconst Board = ({ socket, board, player, picked, playerPicked }) => {\n    //const [freshBoard, setFreshBoard] = useState(easterEgg(props.room));\n    // THE INITIAL VALUE OF STATE WILL BE ASSIGNED ONLY\n    // ON THE INITIAL RENDER\n    // IN SUBSEQUENT RENDERS, THE ARGUMENT OF USESTATE\n    // WILL BE IGNORED AND THE CURRENT VALUE WILL BE\n    // RETRIEVED\n    const [pick, setPick] = useState('');\n\n    // with 2 boards, there is no reason to listen on the player's board\n    //socket.on(`setState`, (newSquares) => (setSquares(newSquares)));\n    //socket.on(`setFreshBoard`, (newFreshBoard) => (setFreshBoard(newFreshBoard)));\n    const handlePick = (i) => {\n        // saves typing this.state.\n        // can only change board if 2 players in room\n        // will need some 'original player' condition if I\n        // allow players to spectate\n        socket.emit('client:players/picked', {\n            player: player,\n            pick: board[i],\n        });\n        playerPicked();\n        setPick(board[i]);\n    };\n    // this is a white space char, not a space\n    // a space causes shifting of rows\n\n    // sends a request to server to update board on click\n    // might make it return something to synchronize events\n    // emit to everyone in room but self\n    // set square field without server\n    //socket.emit(\"newState\", { squares: newSquares });\n    //setSquares(newSquares);\n\n    const handleContextMenu = (i) => {\n        navigator.clipboard.writeText(board[i]).then(\n            () => {\n                alert(board[i] + ' copied! Paste it in the board to guess!');\n            },\n            () => {\n                alert(\"Couldn't copy emoji. Invalid permissions.\");\n            }\n        );\n    };\n\n    const renderSquare = (i) => {\n        return (\n            <Square\n                index={i}\n                socket={socket}\n                value={board[i]}\n                onClick={!picked ? () => handlePick(i) : null}\n                onContextMenu={() => {\n                    handleContextMenu(i);\n                }}\n            />\n        );\n    };\n    return (\n        <div>\n            <div class=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n                {renderSquare(6)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(7)}\n                {renderSquare(8)}\n                {renderSquare(9)}\n                {renderSquare(10)}\n                {renderSquare(11)}\n                {renderSquare(12)}\n                {renderSquare(13)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(14)}\n                {renderSquare(15)}\n                {renderSquare(16)}\n                {renderSquare(17)}\n                {renderSquare(18)}\n                {renderSquare(19)}\n                {renderSquare(20)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(21)}\n                {renderSquare(22)}\n                {renderSquare(23)}\n                {renderSquare(24)}\n                {renderSquare(25)}\n                {renderSquare(26)}\n                {renderSquare(27)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(28)}\n                {renderSquare(29)}\n                {renderSquare(30)}\n                {renderSquare(31)}\n                {renderSquare(32)}\n                {renderSquare(33)}\n                {renderSquare(34)}\n            </div>\n            <div class=\"text-row\">\n                <Choice pick={pick} />\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    picked: state.player,\n});\n\nconst mapDispatchToProps = {\n    playerPicked,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n"]},"metadata":{},"sourceType":"module"}
{"version":3,"sources":["socketlocal.js","Select.js","JoinRoomButton.js","HomePageDiv.js","apiUtils.js","home.page.js","game/RoomName.js","game/OpponentSquare.js","game/OpponentBoard.js","game/Square.js","game/PickTextBox.js","game/Board.js","redux/playersSlice.js","game/PlayerTurn.js","game/OpponentTurn.js","game/TurnHandler.js","redux/gameLogSlice.js","game/GameLog.js","game/game.page.js","redux/opponentBoardSlice.js","footer.js","redux/roomSlice.js","App.js","redux/boardsSlice.js","redux/roomsSlice.js","serviceWorker.js","redux/store.js","index.js"],"names":["socket","io","Select","header","emptyMessage","onClick","selections","id","length","map","_","index","autoFocus","JoinRoomButton","roomID","board","handleJoin","connect","state","boards","previews","rooms","useState","tempBoard","setTempBoard","tempRoomID","setTempRoomID","align","data-testid","value","onChange","e","target","i","emit","graphQlApiUrl","argsJsonStringify","argsObject","JSON","stringify","replace","fetchGraphQLData","query","fetch","method","credentials","headers","body","then","res","json","console","log","data","catch","err","error","getEmojis","a","args","promiseResult","getBoards","randomSmiley","room","RoomName","props","OpponentSquare","className","show","opponentBoard","renderSquare","class","Square","onContextMenu","setShow","preventDefault","PickTextBox","pick","mapDispatchToProps","playerPicked","type","picked","player","setPick","handlePick","navigator","clipboard","writeText","alert","handleContextMenu","PlayerTurn","handleSubmitTurn","askingTurn","tempQuestion","setTempQuestion","placeholder","OpponentTurn","opponent","turn","roomFull","player1Turn","playerTurn","winner","turnSubmitted","turnData","payload","cleared","gameLog","dispatch","useDispatch","untrimmedMessage","message","trim","username","gameCount","useEffect","on","clicked","off","Footer","role","href","src","width","height","makeid","result","characters","charactersLength","charAt","Math","floor","random","roomJoined","joinData","gotBoards","gotRooms","homePageLoaded","emoji","x","emojis","group","array","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Array","fill","retVal","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9fe95050.chunk.js","sourcesContent":["import io from 'socket.io-client';\nlet socket = io('http://localhost:5000');\nexport default socket;\n","import React from 'react';\n\n// Select component which will take in rooms or preview\nconst Select = ({ header, emptyMessage, onClick, selections }) => {\n    return (\n        <>\n            <h3>{header}</h3>\n            <div id=\"board-select\">\n                {selections != null && selections.length > 0\n                    ? selections.map((_, index) => (\n                          <button\n                              id=\"board-select-button\"\n                              onClick={() => onClick(index)}\n                              autoFocus={index == 1}\n                          >\n                              {selections[index]}\n                          </button>\n                      ))\n                    : `${emptyMessage}`}\n            </div>\n        </>\n    );\n};\n\nexport default Select;\n","import React from 'react';\n\nconst JoinRoomButton = ({ roomID, board, handleJoin }) => {\n    return (\n        <button\n            id=\"board-select-button\"\n            onClick={() => handleJoin({ roomID: roomID, board: board })}\n        >\n            PLAY\n        </button>\n    );\n};\n\nexport default JoinRoomButton;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport Select from './Select';\nimport JoinRoomButton from './JoinRoomButton';\nimport { connect } from 'react-redux';\n\nconst HomePageDiv = ({\n    boards,\n    previews,\n    rooms,\n    handleJoin,\n    roomID,\n    socket,\n}) => {\n    // the idea is to hold tempBoard and tempID in component state\n    // and hold the 'real' board and 'real' id in store\n    // store id and board will be updated on PLAY\n    // this allows me to not have to connect the home page\n    // to the store\n    const [tempBoard, setTempBoard] = useState(boards ? boards[0] : null);\n    const [tempRoomID, setTempRoomID] = useState(roomID);\n\n    const handleBoardClick = (i) => {\n        setTempBoard(boards[i]);\n    };\n\n    const handleRoomClick = (i) => {\n        // join room should not require board\n        handleJoin({\n            roomID: rooms[i],\n            board: [],\n        });\n    };\n\n    const handleChange = (e) => {\n        setTempRoomID(e.target.value);\n    };\n\n    return (\n        <div align=\"center\">\n            Room ID:\n            <input\n                data-testid=\"roomId\"\n                value={tempRoomID}\n                onChange={handleChange}\n            />\n            <JoinRoomButton\n                roomID={tempRoomID}\n                board={tempBoard}\n                handleJoin={handleJoin}\n            />\n            <Select\n                header={'Select Board'}\n                selections={previews}\n                onClick={handleBoardClick}\n                emptyMessage={'Waiting for boards fetch... ⌛'}\n            />\n            <Select\n                header={'Join Room'}\n                selections={rooms}\n                onClick={handleRoomClick}\n                emptyMessage={'There are no rooms 🥺 Make one or refresh!'}\n            />\n            <button\n                id=\"board-select-button\"\n                onClick={() => socket.emit('client:rooms/roomsRequested')}\n            >\n                Refresh Rooms\n            </button>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    boards: state.boards.boards,\n    previews: state.boards.previews,\n    rooms: state.rooms,\n});\n\nexport default connect(mapStateToProps)(HomePageDiv);\n","const graphQlApiUrl = 'http://localhost:3005/graphql';\n\nexport const graphQlPost = async (query) => {\n    const res = await fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n    })\n        .then((res) => res.json())\n        .then((json) => {\n            console.log(`response from ${query}: `, json.data);\n            return json.data;\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n    return res;\n};\n\nexport const argsJsonStringify = (argsObject) => {\n    return argsObject\n        ? JSON.stringify(argsObject)\n              // removes quotes from keys\n              .replace(/\"([^\"]+)\":/g, '$1:')\n              .replace('{', '(')\n              .replace('}', ')')\n        : '';\n};\n\nexport const fetchGraphQLData = (query) =>\n    fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n    })\n        .then((res) => res.json())\n        .then((json) => {\n            console.log(`response from ${query}: `, json.data);\n            return json.data;\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n\nexport const getEmojis = async (argsObject = null) => {\n    const args = argsJsonStringify(argsObject);\n    // {getEmojis(group: \"Smileys & Emotion\"){emoji}}\n    const query = `\n        {\n            getEmojis${args}{\n                emoji\n            }\n        } \n    `;\n    const promiseResult = await fetchGraphQLData(query);\n    return promiseResult?.getEmojis;\n    // return json.data.getEmojis;\n};\n\nexport const getBoards = async (query) => {\n    const boards = await fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n    })\n        .then((res) => res.json())\n        .then((json) => {\n            console.log(`response from ${query}: `, json.data.getBoards);\n            return json.data.getBoards;\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n    return boards;\n};\n\nconst createBoard = async (mutation) => {\n    console.log('createBoard -> mutation', mutation);\n    const board = await fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query: mutation }),\n    })\n        .then((res) => res.json())\n        .then((json) => {\n            console.log(`response from ${mutation}: `, json.data.getEmojis);\n            return json.data.getEmojis;\n        })\n        .catch((err) => {\n            console.error(err);\n        });\n    return board;\n};\n\nexport const addGetEmojiResponseAsBoard = (array) =>\n    // the beginning of query\n    'mutation{createBoard(emojis: [\"' +\n    // create array of emoji strings\n    array\n        .map((x) => x.emoji)\n        // take only first 40 elements\n        .slice(80, 120)\n        // create a string with elements\n        .join('\",\"') +\n    '\"]){emojis}}';\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport HomePageDiv from './HomePageDiv';\nimport { getEmojis } from './apiUtils';\n// boards is a map where the key is name\n// it returns an object of {data, preview}\nimport './index.css';\n\nconst HomePage = ({ handleJoin, roomID, randomSmiley, socket }) => {\n    return (\n        <div>\n            <h1 align=\"center\">{'GUESSTIM' + randomSmiley + 'JI'}</h1>\n            <HomePageDiv\n                handleJoin={handleJoin}\n                roomID={roomID}\n                socket={socket}\n            />\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    randomSmiley: state.room.randomSmiley,\n});\n\nexport default connect(mapStateToProps)(HomePage);\n","import React from 'react';\nconst RoomName = (props) => {\n    return (\n        <div>\n            <h3>Room Name: {props.roomID}</h3>\n        </div>\n    );\n};\n\nexport default RoomName;\n","import React, { useState } from 'react';\nfunction OpponentSquare(props) {\n    // note the use of jsx in onClick attribute and button content\n    const [squareVal, setSquareVal] = useState(props.value);\n    return <button className=\"opponent-square\">{props.value}</button>;\n}\n\nexport default OpponentSquare;\n","import React, { useState } from 'react';\nimport OpponentSquare from './OpponentSquare';\nimport { connect } from 'react-redux';\nconst OpponentBoard = ({ socket, board, show }) => {\n    //const [freshBoard, setFreshBoard] = useState(easterEgg(props.room));\n\n    // it'll be way easier to have the second player submit the board I think,\n    // updating the board the other player has in Game\n    //socket.on(`setFreshBoard`, (newFreshBoard) => (setFreshBoard(newFreshBoard)));\n\n    const renderSquare = (i) => {\n        return <OpponentSquare index={i} value={show[i] ? board[i] : '█'} />;\n    };\n    return (\n        <div class=\"board\">\n            <div class=\"board-row\">\n                {renderSquare(28)}\n                {renderSquare(29)}\n                {renderSquare(30)}\n                {renderSquare(31)}\n                {renderSquare(32)}\n                {renderSquare(33)}\n                {renderSquare(34)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(21)}\n                {renderSquare(22)}\n                {renderSquare(23)}\n                {renderSquare(24)}\n                {renderSquare(25)}\n                {renderSquare(26)}\n                {renderSquare(27)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(14)}\n                {renderSquare(15)}\n                {renderSquare(16)}\n                {renderSquare(17)}\n                {renderSquare(18)}\n                {renderSquare(19)}\n                {renderSquare(20)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(7)}\n                {renderSquare(8)}\n                {renderSquare(9)}\n                {renderSquare(10)}\n                {renderSquare(11)}\n                {renderSquare(12)}\n                {renderSquare(13)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n                {renderSquare(6)}\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    show: state.opponentBoard,\n});\n\nexport default connect(mapStateToProps, null)(OpponentBoard);\n","import React, { useState } from 'react';\nfunction Square({ index, socket, value, onClick, onContextMenu }) {\n    // note the use of jsx in onClick attribute and button content\n    const [show, setShow] = useState(true);\n\n    return (\n        <button\n            className=\"square\"\n            onClick={\n                onClick\n                    ? onClick\n                    : () => {\n                          setShow(!show);\n                          socket.emit('client:opponentBoard/clicked', index);\n                      }\n            }\n            onContextMenu={(e) => {\n                e.preventDefault();\n                onContextMenu();\n            }}\n        >\n            {show ? value : '█'}\n        </button>\n    );\n}\n\nexport default Square;\n","import React, { useState } from 'react';\n\nfunction PickTextBox({ pick }) {\n    return (\n        <button className=\"choice\">\n            {pick ? `You picked ${pick}.` : `Pick your emoji!`}\n        </button>\n    );\n}\n\nexport default PickTextBox;\n","import React, { useState } from 'react';\nimport Square from './Square';\nimport Choice from './PickTextBox';\nimport { connect } from 'react-redux';\nimport { playerPicked } from '../redux/playersSlice';\n\n// i'm hoping that when the client socket emits a request,\n// the server will be able to extract room information\n// and access gamedata hashtable with that\nconst Board = ({ socket, board, player, picked, playerPicked }) => {\n    //const [freshBoard, setFreshBoard] = useState(easterEgg(props.room));\n    // THE INITIAL VALUE OF STATE WILL BE ASSIGNED ONLY\n    // ON THE INITIAL RENDER\n    // IN SUBSEQUENT RENDERS, THE ARGUMENT OF USESTATE\n    // WILL BE IGNORED AND THE CURRENT VALUE WILL BE\n    // RETRIEVED\n    const [pick, setPick] = useState('');\n\n    // with 2 boards, there is no reason to listen on the player's board\n    //socket.on(`setState`, (newSquares) => (setSquares(newSquares)));\n    //socket.on(`setFreshBoard`, (newFreshBoard) => (setFreshBoard(newFreshBoard)));\n    const handlePick = (i) => {\n        // saves typing this.state.\n        // can only change board if 2 players in room\n        // will need some 'original player' condition if I\n        // allow players to spectate\n        socket.emit('client:players/picked', {\n            player: player,\n            pick: board[i],\n        });\n        playerPicked();\n        setPick(board[i]);\n    };\n    // this is a white space char, not a space\n    // a space causes shifting of rows\n\n    // sends a request to server to update board on click\n    // might make it return something to synchronize events\n    // emit to everyone in room but self\n    // set square field without server\n    //socket.emit(\"newState\", { squares: newSquares });\n    //setSquares(newSquares);\n\n    const handleContextMenu = (i) => {\n        navigator.clipboard.writeText(board[i]).then(\n            () => {\n                alert(board[i] + ' copied! Paste it in the board to guess!');\n            },\n            () => {\n                alert(\"Couldn't copy emoji. Invalid permissions.\");\n            }\n        );\n    };\n\n    const renderSquare = (i) => {\n        return (\n            <Square\n                index={i}\n                socket={socket}\n                value={board[i]}\n                onClick={!picked ? () => handlePick(i) : null}\n                onContextMenu={() => {\n                    handleContextMenu(i);\n                }}\n            />\n        );\n    };\n    return (\n        <div>\n            <div class=\"board-row\">\n                {renderSquare(0)}\n                {renderSquare(1)}\n                {renderSquare(2)}\n                {renderSquare(3)}\n                {renderSquare(4)}\n                {renderSquare(5)}\n                {renderSquare(6)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(7)}\n                {renderSquare(8)}\n                {renderSquare(9)}\n                {renderSquare(10)}\n                {renderSquare(11)}\n                {renderSquare(12)}\n                {renderSquare(13)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(14)}\n                {renderSquare(15)}\n                {renderSquare(16)}\n                {renderSquare(17)}\n                {renderSquare(18)}\n                {renderSquare(19)}\n                {renderSquare(20)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(21)}\n                {renderSquare(22)}\n                {renderSquare(23)}\n                {renderSquare(24)}\n                {renderSquare(25)}\n                {renderSquare(26)}\n                {renderSquare(27)}\n            </div>\n            <div class=\"board-row\">\n                {renderSquare(28)}\n                {renderSquare(29)}\n                {renderSquare(30)}\n                {renderSquare(31)}\n                {renderSquare(32)}\n                {renderSquare(33)}\n                {renderSquare(34)}\n            </div>\n            <div class=\"text-row\">\n                <Choice pick={pick} />\n            </div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    picked: state.player,\n});\n\nconst mapDispatchToProps = {\n    playerPicked,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n","export const playerReducer = (state = false, action) => {\n    switch (action.type) {\n        case 'player/picked':\n            return true;\n        case 'player/reset':\n            return false;\n        default:\n            return state;\n    }\n};\n\nexport const playerPicked = () => ({\n    type: 'player/picked',\n});\n","import React, { useState } from 'react';\n\nconst PlayerTurn = ({ handleSubmitTurn, askingTurn }) => {\n    const [tempQuestion, setTempQuestion] = useState('');\n    const onChange = (e) => {\n        setTempQuestion(e.target.value);\n    };\n    return askingTurn ? (\n        <div>\n            <input\n                onChange={onChange}\n                value={tempQuestion}\n                placeholder=\"Ask question or guess\"\n            />\n            <button\n                id=\"board-select-button\"\n                onClick={() => handleSubmitTurn(tempQuestion)}\n            >\n                SEND\n            </button>\n        </div>\n    ) : (\n        <div>\n            <button\n                id=\"board-select-button\"\n                onClick={() => handleSubmitTurn('Yes.')}\n            >\n                YES\n            </button>\n            <button\n                id=\"board-select-button\"\n                onClick={() => handleSubmitTurn('No.')}\n            >\n                NO\n            </button>\n        </div>\n    );\n};\n\nexport default PlayerTurn;\n","import React from 'react';\nconst OpponentTurn = ({ opponent, askingTurn }) =>\n    askingTurn ? (\n        <div>{`Waiting for Player ${opponent} to ask...`}</div>\n    ) : (\n        <div>{`Waiting for Player ${opponent} to answer your question...`}</div>\n    );\n\nexport default OpponentTurn;\n","import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport PlayerTurn from './PlayerTurn';\nimport OpponentTurn from './OpponentTurn';\n\nconst TurnHandler = ({\n    socket,\n    player,\n    picked,\n    turn,\n    roomID,\n    roomFull,\n    handleSubmitTurn,\n    winner,\n}) => {\n    // turn 1/2 is answering yes or no\n    // turn 2/2 is asking a question\n    // TURN CYCLE:\n    // player 2 turn 2/2  (turn 0)\n    // player 1 turn 1/2\n    // player 1 turn 2/2\n    // player 2 turn 1/2\n    const player1Turn = turn % 4 === 1 || turn % 4 === 2;\n    const player2Turn = !player1Turn;\n    const playerTurn =\n        (player === 1 && player1Turn) || (player === 2 && player2Turn);\n    const askingTurn = turn % 2 === 0;\n    const opponent = (player % 2) + 1;\n\n    // message can be populated with yes/no button or\n\n    // if send is available as soon as you join\n    // the gameLog room for player 2 will need to be updated when they join\n    if (winner) {\n        // need 'New Game' button which brings up board select for player 1\n        // need 'Waiting for Player 1 to start a new game...' for player 2\n        return <div>GAME OVER</div>;\n    } else if (!roomFull) {\n        return <div>Waiting for Player 2 to join...</div>;\n    } else if (!picked) {\n        return <div></div>;\n    } else {\n        return playerTurn ? (\n            <PlayerTurn\n                handleSubmitTurn={handleSubmitTurn}\n                askingTurn={askingTurn}\n            />\n        ) : (\n            <OpponentTurn opponent={opponent} askingTurn={askingTurn} />\n        );\n    }\n};\n\nconst mapStateToProps = (state) => ({\n    picked: state.player,\n});\n\nexport default connect(mapStateToProps, null)(TurnHandler);\n","export const gameLogReducer = (state = [], action) => {\n    console.log('in gameLog reducer');\n    switch (action.type) {\n        case 'gameLog/cleared':\n            return [];\n        case 'gameLog/turnSubmitted':\n            return [action.payload, ...state];\n        default:\n            return state;\n    }\n};\n\n// message is of the form :\n//    {username: 'Player 1', message: 'hi' }\nexport const turnSubmitted = (turnData) => ({\n    type: 'gameLog/turnSubmitted',\n    payload: turnData,\n});\n\nexport const cleared = () => ({\n    type: 'gameLog/cleared',\n});\n","import React, { useEffect, useState } from 'react';\nimport TurnHandler from './TurnHandler';\nimport { connect, useDispatch } from 'react-redux';\nimport { turnSubmitted } from '../redux/gameLogSlice';\n\nconst GameLog = ({ socket, roomID, roomFull, gameLog, player, winner }) => {\n    const opponent = (player % 2) + 1;\n    console.log('GameLog -> player', player);\n    console.log('GameLog -> opponent', opponent);\n    const dispatch = useDispatch();\n\n    const handleSubmitTurn = (untrimmedMessage) => {\n        const message = untrimmedMessage.trim();\n        socket.emit('client:gameLog/turnSubmitted', {\n            player: player,\n            message: message,\n        });\n        dispatch(turnSubmitted({ username: 'You', message: message }));\n    };\n\n    const renderGameLog = () => {\n        // the second argument of map is optional, takes in the index\n        // of the element\n        // don't use curly brace tuples that don't have tags!!\n        return gameLog.map(({ username: username, message: message }, i) => (\n            <div\n                class={i === 0 ? 'game-log-last-message' : 'game-log-message'}\n                key={i}\n            >\n                <span>{username + ':'}</span>\n                <span>{message}</span>\n            </div>\n        ));\n    };\n    return (\n        <div>\n            <TurnHandler\n                socket={socket}\n                player={player}\n                turn={gameLog.length}\n                roomID={roomID}\n                roomFull={roomFull}\n                handleSubmitTurn={handleSubmitTurn}\n                winner={winner}\n            />\n            <div class=\"game-log-box\">{renderGameLog()}</div>\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    gameLog: state.gameLog,\n});\n\nconst mapDispatchToProps = {\n    turnSubmitted,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GameLog);\n","import React, { Component, useEffect, useState } from 'react';\nimport RoomName from './RoomName';\nimport OpponentBoard from './OpponentBoard';\nimport Board from './Board';\nimport GameLog from './GameLog';\nimport queryString from 'query-string';\nimport socket from '../socketlocal';\nimport '../index.css';\nimport { connect, useDispatch } from 'react-redux';\nimport { turnSubmitted, cleared } from '../redux/gameLogSlice';\nimport { clicked } from '../redux/opponentBoardSlice';\n//import socket from '../../socket';\n\n// This is the VIEW in MVC\n\n// props are a way of passing data from parent to child\n//      props are passed to the component\n// state is reserved for interactivity\n//      states are modified within the component\n\n// I can send requests with the root room\n// the response will go to the game specific room\n\n// I need to figure out how to pass down the values\nconst GamePage = ({\n    socket,\n    roomID,\n    roomFull,\n    board,\n    player,\n    gameCount,\n    winner,\n}) => {\n    const dispatch = useDispatch();\n    useEffect(() => {\n        if (roomFull) {\n            socket.on('server:gameLog/turnSubmitted', (turnData) => {\n                dispatch(turnSubmitted(turnData));\n            });\n            socket.on('server:opponentBoard/clicked', (index) => {\n                dispatch(clicked(index));\n            });\n        } else {\n            socket.off('server:gameLog/turnSubmitted');\n            socket.off('server:opponentBoard/clicked');\n        }\n    }, [roomFull]);\n    useEffect(() => {\n        socket.on('server:gameLog/cleared', () => {\n            dispatch(cleared());\n        });\n    }, []);\n\n    // make sure that you check to see if you can import socket\n    // or have to pass it as prop\n    // the empty array tells useEffect to only run once\n\n    // state changes in a useEffect could cause an inf loop\n    /*\n  useEffect(() => {\n    if(socket.room !== roomQuery ){\n      socket.emit(\"subscribe\", roomQuery);\n      console.log(`Subscribed to ${socket.room} in useEffect`);\n    }\n  });\n  */\n\n    // the component will be mounted if the player number is found\n    return (\n        <div>\n            <div>\n                <RoomName roomID={roomID} />\n                <OpponentBoard board={board} socket={socket} roomID={roomID} />\n                <Board\n                    board={board}\n                    socket={socket}\n                    roomID={roomID}\n                    player={player}\n                />\n                <GameLog\n                    socket={socket}\n                    roomID={roomID}\n                    roomFull={roomFull}\n                    player={player}\n                    winner={winner}\n                />\n                {\n                    // Need 'Leave Room' button\n                }\n            </div>\n        </div>\n    );\n};\n\n// there will need to be two boards\n// I chose squares to be a state because\n// I want the user to modify the board\n// Board\n//    states\n//        squares\n// if the onClick function is going to modify squares\n// it needs to be in the scope of Board\n// thus, it needs to be a prop of square\n// this is why I am not making Board a functional component\n// TODO : learn why it is bad to define functions\n//        inside functional components\n\n// OpponentBoard will listen and update remotely\n\n// Board will emit and update locally\n\n// Square\n//    props\n//      value\n//      onClick\n\nconst mapStateToProps = (state) => ({\n    ...state.room,\n});\n\nconst mapDispatchToProps = {\n    turnSubmitted,\n    cleared,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\n","export const opponentBoardReducer = (\n    state = new Array(35).fill(true),\n    action\n) => {\n    switch (action.type) {\n        case 'opponentBoard/reset':\n            return new Array(35).fill(true);\n        case 'opponentBoard/click':\n            // try to do the (({})=>({}))(state) trick here\n            return state.map((x, i) => (i === action.payload ? !x : x));\n        default:\n            return state;\n    }\n};\n\nexport const clicked = (index) => ({\n    type: 'opponentBoard/click',\n    payload: index,\n});\n\nexport const reset = () => ({ type: 'opponentBoard/reset' });\n","import React from 'react';\n\nfunction Footer() {\n    return (\n        <nav role=\"navigation\" class=\"nav-table\">\n            <ul>\n                <li>\n                    <a\n                        href=\"https://www.linkedin.com/in/tom-o-shaughnessy/\"\n                        target=\"_blank\"\n                    >\n                        <img\n                            src={'./square-linkedin-512.png'}\n                            width=\"30px\"\n                            height=\"auto\"\n                        />\n                    </a>\n                </li>\n                <li>\n                    <a\n                        href=\"https://github.com/tomoshaughnessy/guesstimoji\"\n                        target=\"_blank\"\n                    >\n                        <img\n                            src={'./square-github.png'}\n                            width=\"30px\"\n                            height=\"auto\"\n                        />\n                    </a>\n                </li>\n                <li>\n                    <a href=\"http://localhost:3005/graphql\" target=\"_blank\">\n                        <img\n                            src={'./square-graphql.png'}\n                            width=\"30px\"\n                            height=\"auto\"\n                        />\n                    </a>\n                </li>\n            </ul>\n        </nav>\n    );\n}\n\nexport default Footer;\n","// this reducer handles updates to id, board, and roomFull\n// roomFull will decide to render gamePage\n// id and board will be passed to gamePage\nfunction makeid(length) {\n    var result = '';\n    var characters =\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n    var charactersLength = characters.length;\n    for (var i = 0; i < length; i++) {\n        result += characters.charAt(\n            Math.floor(Math.random() * charactersLength)\n        );\n    }\n    return result;\n}\n\nexport const roomReducer = (\n    state = {\n        roomID: makeid(5),\n        roomFull: false,\n        board: [],\n        randomSmiley: '😎',\n    },\n    action\n) => {\n    switch (action.type) {\n        case 'homePageLoaded':\n            return {\n                ...state,\n                randomSmiley: action.payload,\n            };\n        case 'room/roomJoined':\n            console.log('new state update game', {\n                ...state,\n                ...action.payload,\n            });\n            return {\n                ...state,\n                ...action.payload,\n            };\n        default:\n            return state;\n    }\n};\n\nexport const roomJoined = (joinData) => {\n    console.log('roomJoined -> joinData', joinData);\n    return {\n        type: 'room/roomJoined',\n        payload: joinData,\n    };\n};\n\nexport const homePageLoaded = (emoji) => {\n    return {\n        type: 'homePageLoaded',\n        payload: emoji,\n    };\n};\n","import React, { useEffect, useState } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// import socket from \"./socket\";\nimport socket from './socketlocal';\nimport HomePage from './home.page';\nimport GamePage from './game/game.page';\nimport Footer from './footer';\nimport './index.css';\nimport { connect } from 'react-redux';\nimport { homePageLoaded, roomJoined } from './redux/roomSlice';\nimport {\n    getBoards,\n    getEmojis,\n    addGetEmojiResponseAsBoard,\n    graphQlPost,\n} from './apiUtils';\nimport { gotBoards } from './redux/boardsSlice';\nimport { gotRooms } from './redux/roomsSlice';\n// view layer\n\n// handleJoin data should have both id and board selection\n\n// the first argument to a component is always the props obj\nconst App = ({\n    roomJoined,\n    homePageLoaded,\n    gotBoards,\n    gotRooms,\n    roomID,\n    player,\n}) => {\n    useEffect(() => {\n        getBoards('{getBoards{emojis}}')\n            .then((res) => res.map((x) => x.emojis))\n            .then((boards) => {\n                console.log('gotBoards');\n                gotBoards(boards);\n            })\n            .catch((err) => console.error(err));\n        getEmojis({ group: 'Smileys & Emotion' })\n            .then((array) => array.map((x) => x.emoji))\n            .then((array) =>\n                homePageLoaded(array[Math.floor(Math.random() * array.length)])\n            )\n            .catch((err) => {\n                homePageLoaded('❌');\n                console.error(err);\n            });\n        socket.emit('client:rooms/roomsRequested');\n        socket.on('server:rooms/roomsResponded', (rooms) => {\n            console.log('rooms responded');\n            gotRooms(rooms);\n        });\n    }, []);\n    /*\n  // add boards\n  useEffect(() => {\n    getEmojis({ group: \"Animals & Nature\" }).then((arr) => addGetEmojiResponseAsBoard(arr)).then((str) => graphQlPost(str));\n  }, []);\n  */\n    useEffect(() => {\n        console.log('QUERY TEST:', getEmojis({ group: 'Animals & Nature' }));\n    }, []);\n    const handleJoin = (joinData) => {\n        console.log('handleJoin -> joinData', joinData);\n        socket.emit('client:room/roomJoined', joinData);\n        socket.on('server:room/roomJoined', (joinData) => {\n            if (joinData) {\n                roomJoined(joinData);\n            } else {\n                return;\n            }\n        });\n    };\n    return (\n        <div className=\"App\" align=\"center\">\n            {\n                // player should only be defined if you're in a room\n                // might wanna turn this into a switch statement\n                // page state = {home, game, find}\n                player ? (\n                    <GamePage socket={socket} />\n                ) : (\n                    <HomePage\n                        handleJoin={handleJoin}\n                        roomID={roomID}\n                        socket={socket}\n                    />\n                )\n            }\n            <Footer />\n        </div>\n    );\n};\n\nconst mapStateToProps = (state) => ({\n    roomID: state.room.roomID,\n    player: state.room.player,\n});\n\n// actions : {type: TYPE, ...} ARE OBJECTS\n// actionCreators : (obj) => {...action, ...obj} RETURN ACTIONS\n// mapDispatchToProps will redefine actionCreators as such:\n//      actionCreator(e) = dispatch(actionCreator(e))\n// dispatch will give the new action to the reducer who can access state\n// reducers : (state, action) => state'\n\n// in order for Redux to wrap dispatch around roomJoined,\n// it needs to be passed as a prop\nconst mapDispatchToProps = {\n    roomJoined,\n    gotBoards,\n    gotRooms,\n    homePageLoaded,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const boardsReducer = (\n    state = {\n        boards: [\n            [\n                '🤣',\n                '😂',\n                '🙂',\n                '😄',\n                '🙃',\n                '😊',\n                '😉',\n                '😇',\n                '😍',\n                '🥰',\n                '🤩',\n                '😃',\n                '😅',\n                '😁',\n                '😆',\n                '😗',\n                '😀',\n                '😚',\n                '☺️',\n                '☺',\n                '😙',\n                '🥲',\n                '😋',\n                '😛',\n                '😘',\n                '😜',\n                '🤪',\n                '😝',\n                '🤑',\n                '🤗',\n                '🤭',\n                '🤫',\n                '🤔',\n                '🤐',\n                '🤨',\n                '😐',\n                '😑',\n                '😶',\n                '😏',\n                '😒',\n            ],\n        ],\n        previews: [],\n    },\n    action\n) => {\n    // action.payload is an array of arrays of 40 emojis\n    switch (action.type) {\n        case 'gotBoards':\n            return {\n                ...state,\n                boards: action.payload,\n                previews: action.payload.map((x) => {\n                    let retVal = ``;\n                    var i;\n                    // this is used to join the emojis\n                    // instead of .join because some emojis combine\n                    // two unicode characters\n                    for (i in x) {\n                        // the white space between displays combinations correctly\n                        retVal += x[i] + ` `;\n                    }\n                    return retVal;\n                }),\n            };\n        default:\n            return state;\n    }\n};\n\nexport const gotBoards = (boards) => ({\n    type: 'gotBoards',\n    payload: boards,\n});\n","export const roomsReducer = (state = [], action) => {\n    // action.payload is an array of arrays of 40 emojis\n    switch (action.type) {\n        case 'gotRooms':\n            // don't want to spread array here bc not saving\n            return action.payload;\n        default:\n            return state;\n    }\n};\n\nexport const gotRooms = (rooms) => ({\n    type: 'gotRooms',\n    payload: rooms,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.0/8 are considered localhost for IPv4.\n        window.location.hostname.match(\n            /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n        )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null &&\n                    contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then((registration) => {\n                registration.unregister();\n            })\n            .catch((error) => {\n                console.error(error.message);\n            });\n    }\n}\n","import { createStore, combineReducers } from 'redux';\nimport { roomReducer } from './roomSlice';\nimport { gameLogReducer } from './gameLogSlice';\nimport { opponentBoardReducer } from './opponentBoardSlice';\nimport { playerReducer } from './playersSlice';\nimport { boardsReducer } from './boardsSlice';\nimport { roomsReducer } from './roomsSlice';\n\n// by default switch cases, combineReducers returns the state tree:\n// {gameLog: [...], app:{...}}\nconst rootReducer = combineReducers({\n    room: roomReducer,\n    gameLog: gameLogReducer,\n    opponentBoard: opponentBoardReducer,\n    player: playerReducer,\n    boards: boardsReducer,\n    rooms: roomsReducer,\n});\n\nconst store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from 'react';\nimport { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// create-react-app (CRA) use\nimport store from './redux/store';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
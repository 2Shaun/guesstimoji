{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\tomwo_26b3mwb\\\\source\\\\repos\\\\guesstimoji\\\\src\\\\HomePageDiv.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"./Select\";\nimport JoinRoomButton from \"./JoinRoomButton\";\nimport { connect } from \"react-redux\";\n\nconst HomePageDiv = ({\n  boards,\n  previews,\n  rooms,\n  handleJoin,\n  roomID,\n  socket\n}) => {\n  _s();\n\n  // the idea is to hold tempBoard and tempID in component state\n  // and hold the 'real' board and 'real' id in store\n  // store id and board will be updated on PLAY\n  // this allows me to not have to connect the home page\n  // to the store\n  const [tempBoard, setTempBoard] = useState(boards ? boards[0] : null);\n  const [tempRoomID, setTempRoomID] = useState(roomID);\n\n  const handleBoardClick = i => {\n    setTempBoard(boards[i]);\n  };\n\n  const handleRoomClick = i => {\n    // join room should not require board\n    handleJoin({\n      roomID: rooms[i],\n      board: []\n    });\n  };\n\n  const handleChange = e => {\n    setTempRoomID(e.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    align: \"center\",\n    children: [\"Room ID:\", /*#__PURE__*/_jsxDEV(\"input\", {\n      value: tempRoomID,\n      onChange: handleChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JoinRoomButton, {\n      roomID: tempRoomID,\n      board: tempBoard,\n      handleJoin: handleJoin\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      header: 'Select Board',\n      selections: previews,\n      onClick: handleBoardClick,\n      emptyMessage: 'Waiting for boards fetch... âŒ›'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Select, {\n      header: 'Join Room',\n      selections: rooms,\n      onClick: handleRoomClick,\n      emptyMessage: 'There are no rooms ðŸ¥º Make one or refresh!'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      id: \"board-select-button\",\n      onClick: () => socket.emit(\"client:rooms/roomsRequested\"),\n      children: \"Refresh Rooms\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(HomePageDiv, \"g7Za6g8BJ1Cag4HJM5pL2kksFnA=\");\n\n_c = HomePageDiv;\n\nconst mapStateToProps = state => ({\n  boards: state.boards.boards,\n  previews: state.boards.previews,\n  rooms: state.rooms\n});\n\nexport default connect(mapStateToProps)(HomePageDiv);\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePageDiv\");","map":{"version":3,"sources":["C:/Users/tomwo_26b3mwb/source/repos/guesstimoji/src/HomePageDiv.js"],"names":["React","useState","Link","Select","JoinRoomButton","connect","HomePageDiv","boards","previews","rooms","handleJoin","roomID","socket","tempBoard","setTempBoard","tempRoomID","setTempRoomID","handleBoardClick","i","handleRoomClick","board","handleChange","e","target","value","emit","mapStateToProps","state"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,IAAT,QAAqB,kBAArB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,QAAV;AAAoBC,EAAAA,KAApB;AAA2BC,EAAAA,UAA3B;AAAuCC,EAAAA,MAAvC;AAA+CC,EAAAA;AAA/C,CAAD,KAA6D;AAAA;;AAC/E;AACA;AACA;AACA;AACA;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAACM,MAAM,GAAGA,MAAM,CAAC,CAAD,CAAT,GAAe,IAAtB,CAA1C;AACA,QAAM,CAACQ,UAAD,EAAaC,aAAb,IAA8Bf,QAAQ,CAACU,MAAD,CAA5C;;AAEA,QAAMM,gBAAgB,GAAIC,CAAD,IAAO;AAC9BJ,IAAAA,YAAY,CAACP,MAAM,CAACW,CAAD,CAAP,CAAZ;AACD,GAFD;;AAIA,QAAMC,eAAe,GAAID,CAAD,IAAO;AAC7B;AACAR,IAAAA,UAAU,CAAC;AACTC,MAAAA,MAAM,EAAEF,KAAK,CAACS,CAAD,CADJ;AAETE,MAAAA,KAAK,EAAE;AAFE,KAAD,CAAV;AAID,GAND;;AAQA,QAAMC,YAAY,GAAIC,CAAD,IAAO;AAC1BN,IAAAA,aAAa,CAACM,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACD,GAFD;;AAIA,sBACE;AAAK,IAAA,KAAK,EAAC,QAAX;AAAA,wCAEE;AAAO,MAAA,KAAK,EAAET,UAAd;AAA0B,MAAA,QAAQ,EAAEM;AAApC;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,cAAD;AACE,MAAA,MAAM,EAAEN,UADV;AAEE,MAAA,KAAK,EAAEF,SAFT;AAGE,MAAA,UAAU,EAAEH;AAHd;AAAA;AAAA;AAAA;AAAA,YAHF,eAQE,QAAC,MAAD;AACE,MAAA,MAAM,EAAE,cADV;AAEE,MAAA,UAAU,EAAEF,QAFd;AAGE,MAAA,OAAO,EAAES,gBAHX;AAIE,MAAA,YAAY,EAAE;AAJhB;AAAA;AAAA;AAAA;AAAA,YARF,eAcE,QAAC,MAAD;AACE,MAAA,MAAM,EAAE,WADV;AAEE,MAAA,UAAU,EAAER,KAFd;AAGE,MAAA,OAAO,EAAEU,eAHX;AAIE,MAAA,YAAY,EAAE;AAJhB;AAAA;AAAA;AAAA;AAAA,YAdF,eAoBE;AACE,MAAA,EAAE,EAAC,qBADL;AAEE,MAAA,OAAO,EAAE,MAAMP,MAAM,CAACa,IAAP,CAAY,6BAAZ,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YApBF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA6BD,CAtDD;;GAAMnB,W;;KAAAA,W;;AAwDN,MAAMoB,eAAe,GAAIC,KAAD,KAAY;AAClCpB,EAAAA,MAAM,EAAEoB,KAAK,CAACpB,MAAN,CAAaA,MADa;AAElCC,EAAAA,QAAQ,EAAEmB,KAAK,CAACpB,MAAN,CAAaC,QAFW;AAGlCC,EAAAA,KAAK,EAAEkB,KAAK,CAAClB;AAHqB,CAAZ,CAAxB;;AAMA,eAAeJ,OAAO,CAACqB,eAAD,CAAP,CAAyBpB,WAAzB,CAAf","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"./Select\";\nimport JoinRoomButton from \"./JoinRoomButton\";\nimport { connect } from \"react-redux\";\n\nconst HomePageDiv = ({ boards, previews, rooms, handleJoin, roomID, socket }) => {\n  // the idea is to hold tempBoard and tempID in component state\n  // and hold the 'real' board and 'real' id in store\n  // store id and board will be updated on PLAY\n  // this allows me to not have to connect the home page\n  // to the store\n  const [tempBoard, setTempBoard] = useState(boards ? boards[0] : null);\n  const [tempRoomID, setTempRoomID] = useState(roomID);\n\n  const handleBoardClick = (i) => {\n    setTempBoard(boards[i]);\n  };\n\n  const handleRoomClick = (i) => {\n    // join room should not require board\n    handleJoin({\n      roomID: rooms[i],\n      board: [],\n    })\n  };\n\n  const handleChange = (e) => {\n    setTempRoomID(e.target.value);\n  };\n\n  return (\n    <div align=\"center\">\n      Room ID:\n      <input value={tempRoomID} onChange={handleChange} />\n      <JoinRoomButton\n        roomID={tempRoomID}\n        board={tempBoard}\n        handleJoin={handleJoin}\n      />\n      <Select\n        header={'Select Board'}\n        selections={previews}\n        onClick={handleBoardClick}\n        emptyMessage={'Waiting for boards fetch... âŒ›'}\n      />\n      <Select\n        header={'Join Room'}\n        selections={rooms}\n        onClick={handleRoomClick}\n        emptyMessage={'There are no rooms ðŸ¥º Make one or refresh!'}\n      />\n      <button\n        id=\"board-select-button\"\n        onClick={() => socket.emit(\"client:rooms/roomsRequested\")}\n      >\n        Refresh Rooms\n    </button>\n    </div >\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  boards: state.boards.boards,\n  previews: state.boards.previews,\n  rooms: state.rooms,\n})\n\nexport default connect(mapStateToProps)(HomePageDiv);\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\tomwo_26b3mwb\\\\source\\\\repos\\\\guesstimoji\\\\app\\\\src\\\\game\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Square from \"./Square\";\nimport Choice from \"./PickTextBox\";\nimport { connect } from \"react-redux\";\nimport { playerPicked } from \"../redux/playersSlice\"; // i'm hoping that when the client socket emits a request,\n// the server will be able to extract room information\n// and access gamedata hashtable with that\n\nconst Board = ({\n  socket,\n  board,\n  player,\n  picked,\n  playerPicked\n}) => {\n  _s();\n\n  //const [freshBoard, setFreshBoard] = useState(easterEgg(props.room));\n  // THE INITIAL VALUE OF STATE WILL BE ASSIGNED ONLY\n  // ON THE INITIAL RENDER\n  // IN SUBSEQUENT RENDERS, THE ARGUMENT OF USESTATE\n  // WILL BE IGNORED AND THE CURRENT VALUE WILL BE\n  // RETRIEVED\n  const [pick, setPick] = useState(\"\"); // with 2 boards, there is no reason to listen on the player's board\n  //socket.on(`setState`, (newSquares) => (setSquares(newSquares)));\n  //socket.on(`setFreshBoard`, (newFreshBoard) => (setFreshBoard(newFreshBoard)));\n\n  const handlePick = i => {\n    // saves typing this.state.\n    // can only change board if 2 players in room\n    // will need some 'original player' condition if I\n    // allow players to spectate\n    socket.emit(\"client:players/picked\", {\n      player: player,\n      pick: board[i]\n    });\n    playerPicked();\n    setPick(board[i]);\n  }; // this is a white space char, not a space\n  // a space causes shifting of rows\n  // sends a request to server to update board on click\n  // might make it return something to synchronize events\n  // emit to everyone in room but self\n  // set square field without server\n  //socket.emit(\"newState\", { squares: newSquares });\n  //setSquares(newSquares);\n\n\n  const handleContextMenu = i => {\n    navigator.clipboard.writeText(board[i]).then(() => {\n      alert(board[i] + \" copied! Paste it in the board to guess!\");\n    }, () => {\n      alert(\"Couldn't copy emoji. Invalid permissions.\");\n    });\n  };\n\n  const renderSquare = i => {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      index: i,\n      socket: socket,\n      value: board[i],\n      onClick: !picked ? () => handlePick(i) : null,\n      onContextMenu: () => {\n        handleContextMenu(i);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }, this);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(0), renderSquare(1), renderSquare(2), renderSquare(3), renderSquare(4), renderSquare(5), renderSquare(6)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(7), renderSquare(8), renderSquare(9), renderSquare(10), renderSquare(11), renderSquare(12), renderSquare(13)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(14), renderSquare(15), renderSquare(16), renderSquare(17), renderSquare(18), renderSquare(19), renderSquare(20)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(21), renderSquare(22), renderSquare(23), renderSquare(24), renderSquare(25), renderSquare(26), renderSquare(27)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"board-row\",\n      children: [renderSquare(28), renderSquare(29), renderSquare(30), renderSquare(31), renderSquare(32), renderSquare(33), renderSquare(34)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"text-row\",\n      children: /*#__PURE__*/_jsxDEV(Choice, {\n        pick: pick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Board, \"D7HjbpxOTkswEuRSQArgvctUOIw=\");\n\n_c = Board;\n\nconst mapStateToProps = state => ({\n  picked: state.player\n});\n\nconst mapDispatchToProps = {\n  playerPicked\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/tomwo_26b3mwb/source/repos/guesstimoji/app/src/game/Board.js"],"names":["React","useState","Square","Choice","connect","playerPicked","Board","socket","board","player","picked","pick","setPick","handlePick","i","emit","handleContextMenu","navigator","clipboard","writeText","then","alert","renderSquare","mapStateToProps","state","mapDispatchToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,YAAT,QAA6B,uBAA7B,C,CAEA;AACA;AACA;;AACA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,KAAV;AAAiBC,EAAAA,MAAjB;AAAyBC,EAAAA,MAAzB;AAAiCL,EAAAA;AAAjC,CAAD,KAAqD;AAAA;;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,QAAM,CAACM,IAAD,EAAOC,OAAP,IAAkBX,QAAQ,CAAC,EAAD,CAAhC,CAPiE,CASjE;AACA;AACA;;AACA,QAAMY,UAAU,GAAIC,CAAD,IAAO;AACxB;AACA;AACA;AACA;AACAP,IAAAA,MAAM,CAACQ,IAAP,CAAY,uBAAZ,EAAqC;AACnCN,MAAAA,MAAM,EAAEA,MAD2B;AAEnCE,MAAAA,IAAI,EAAEH,KAAK,CAACM,CAAD;AAFwB,KAArC;AAIAT,IAAAA,YAAY;AACZO,IAAAA,OAAO,CAACJ,KAAK,CAACM,CAAD,CAAN,CAAP;AACD,GAXD,CAZiE,CAwBjE;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAME,iBAAiB,GAAIF,CAAD,IAAO;AAC/BG,IAAAA,SAAS,CAACC,SAAV,CAAoBC,SAApB,CAA8BX,KAAK,CAACM,CAAD,CAAnC,EAAwCM,IAAxC,CACE,MAAM;AACJC,MAAAA,KAAK,CAACb,KAAK,CAACM,CAAD,CAAL,GAAW,0CAAZ,CAAL;AACD,KAHH,EAIE,MAAM;AACJO,MAAAA,KAAK,CAAC,2CAAD,CAAL;AACD,KANH;AAQD,GATD;;AAWA,QAAMC,YAAY,GAAIR,CAAD,IAAO;AAC1B,wBACE,QAAC,MAAD;AACE,MAAA,KAAK,EAAEA,CADT;AAEE,MAAA,MAAM,EAAEP,MAFV;AAGE,MAAA,KAAK,EAAEC,KAAK,CAACM,CAAD,CAHd;AAIE,MAAA,OAAO,EAAE,CAACJ,MAAD,GAAU,MAAMG,UAAU,CAACC,CAAD,CAA1B,GAAgC,IAJ3C;AAKE,MAAA,aAAa,EAAE,MAAM;AACnBE,QAAAA,iBAAiB,CAACF,CAAD,CAAjB;AACD;AAPH;AAAA;AAAA;AAAA;AAAA,YADF;AAWD,GAZD;;AAaA,sBACE;AAAA,4BACE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA,iBACGQ,YAAY,CAAC,CAAD,CADf,EAEGA,YAAY,CAAC,CAAD,CAFf,EAGGA,YAAY,CAAC,CAAD,CAHf,EAIGA,YAAY,CAAC,CAAD,CAJf,EAKGA,YAAY,CAAC,CAAD,CALf,EAMGA,YAAY,CAAC,CAAD,CANf,EAOGA,YAAY,CAAC,CAAD,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA,iBACGA,YAAY,CAAC,CAAD,CADf,EAEGA,YAAY,CAAC,CAAD,CAFf,EAGGA,YAAY,CAAC,CAAD,CAHf,EAIGA,YAAY,CAAC,EAAD,CAJf,EAKGA,YAAY,CAAC,EAAD,CALf,EAMGA,YAAY,CAAC,EAAD,CANf,EAOGA,YAAY,CAAC,EAAD,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA,YAVF,eAmBE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA,iBACGA,YAAY,CAAC,EAAD,CADf,EAEGA,YAAY,CAAC,EAAD,CAFf,EAGGA,YAAY,CAAC,EAAD,CAHf,EAIGA,YAAY,CAAC,EAAD,CAJf,EAKGA,YAAY,CAAC,EAAD,CALf,EAMGA,YAAY,CAAC,EAAD,CANf,EAOGA,YAAY,CAAC,EAAD,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA,YAnBF,eA4BE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA,iBACGA,YAAY,CAAC,EAAD,CADf,EAEGA,YAAY,CAAC,EAAD,CAFf,EAGGA,YAAY,CAAC,EAAD,CAHf,EAIGA,YAAY,CAAC,EAAD,CAJf,EAKGA,YAAY,CAAC,EAAD,CALf,EAMGA,YAAY,CAAC,EAAD,CANf,EAOGA,YAAY,CAAC,EAAD,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA,YA5BF,eAqCE;AAAK,MAAA,KAAK,EAAC,WAAX;AAAA,iBACGA,YAAY,CAAC,EAAD,CADf,EAEGA,YAAY,CAAC,EAAD,CAFf,EAGGA,YAAY,CAAC,EAAD,CAHf,EAIGA,YAAY,CAAC,EAAD,CAJf,EAKGA,YAAY,CAAC,EAAD,CALf,EAMGA,YAAY,CAAC,EAAD,CANf,EAOGA,YAAY,CAAC,EAAD,CAPf;AAAA;AAAA;AAAA;AAAA;AAAA,YArCF,eA8CE;AAAK,MAAA,KAAK,EAAC,UAAX;AAAA,6BACE,QAAC,MAAD;AAAQ,QAAA,IAAI,EAAEX;AAAd;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YA9CF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoDD,CA9GD;;GAAML,K;;KAAAA,K;;AAgHN,MAAMiB,eAAe,GAAIC,KAAD,KAAY;AAClCd,EAAAA,MAAM,EAAEc,KAAK,CAACf;AADoB,CAAZ,CAAxB;;AAIA,MAAMgB,kBAAkB,GAAG;AACzBpB,EAAAA;AADyB,CAA3B;AAIA,eAAeD,OAAO,CAACmB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CnB,KAA7C,CAAf","sourcesContent":["import React, { useState } from \"react\";\r\nimport Square from \"./Square\";\r\nimport Choice from \"./PickTextBox\";\r\nimport { connect } from \"react-redux\";\r\nimport { playerPicked } from \"../redux/playersSlice\"\r\n\r\n// i'm hoping that when the client socket emits a request,\r\n// the server will be able to extract room information\r\n// and access gamedata hashtable with that\r\nconst Board = ({ socket, board, player, picked, playerPicked }) => {\r\n  //const [freshBoard, setFreshBoard] = useState(easterEgg(props.room));\r\n  // THE INITIAL VALUE OF STATE WILL BE ASSIGNED ONLY\r\n  // ON THE INITIAL RENDER\r\n  // IN SUBSEQUENT RENDERS, THE ARGUMENT OF USESTATE\r\n  // WILL BE IGNORED AND THE CURRENT VALUE WILL BE\r\n  // RETRIEVED\r\n  const [pick, setPick] = useState(\"\");\r\n\r\n  // with 2 boards, there is no reason to listen on the player's board\r\n  //socket.on(`setState`, (newSquares) => (setSquares(newSquares)));\r\n  //socket.on(`setFreshBoard`, (newFreshBoard) => (setFreshBoard(newFreshBoard)));\r\n  const handlePick = (i) => {\r\n    // saves typing this.state.\r\n    // can only change board if 2 players in room\r\n    // will need some 'original player' condition if I\r\n    // allow players to spectate\r\n    socket.emit(\"client:players/picked\", {\r\n      player: player,\r\n      pick: board[i],\r\n    });\r\n    playerPicked();\r\n    setPick(board[i]);\r\n  };\r\n  // this is a white space char, not a space\r\n  // a space causes shifting of rows\r\n\r\n  // sends a request to server to update board on click\r\n  // might make it return something to synchronize events\r\n  // emit to everyone in room but self\r\n  // set square field without server\r\n  //socket.emit(\"newState\", { squares: newSquares });\r\n  //setSquares(newSquares);\r\n\r\n  const handleContextMenu = (i) => {\r\n    navigator.clipboard.writeText(board[i]).then(\r\n      () => {\r\n        alert(board[i] + \" copied! Paste it in the board to guess!\");\r\n      },\r\n      () => {\r\n        alert(\"Couldn't copy emoji. Invalid permissions.\");\r\n      }\r\n    );\r\n  };\r\n\r\n  const renderSquare = (i) => {\r\n    return (\r\n      <Square\r\n        index={i}\r\n        socket={socket}\r\n        value={board[i]}\r\n        onClick={!picked ? () => handlePick(i) : null}\r\n        onContextMenu={() => {\r\n          handleContextMenu(i);\r\n        }}\r\n      />\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n        {renderSquare(6)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n        {renderSquare(9)}\r\n        {renderSquare(10)}\r\n        {renderSquare(11)}\r\n        {renderSquare(12)}\r\n        {renderSquare(13)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(14)}\r\n        {renderSquare(15)}\r\n        {renderSquare(16)}\r\n        {renderSquare(17)}\r\n        {renderSquare(18)}\r\n        {renderSquare(19)}\r\n        {renderSquare(20)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(21)}\r\n        {renderSquare(22)}\r\n        {renderSquare(23)}\r\n        {renderSquare(24)}\r\n        {renderSquare(25)}\r\n        {renderSquare(26)}\r\n        {renderSquare(27)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(28)}\r\n        {renderSquare(29)}\r\n        {renderSquare(30)}\r\n        {renderSquare(31)}\r\n        {renderSquare(32)}\r\n        {renderSquare(33)}\r\n        {renderSquare(34)}\r\n      </div>\r\n      <div class=\"text-row\">\r\n        <Choice pick={pick} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  picked: state.player,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  playerPicked,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\r\n"]},"metadata":{},"sourceType":"module"}
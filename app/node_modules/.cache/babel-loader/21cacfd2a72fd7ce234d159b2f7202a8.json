{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\tomwo_26b3mwb\\\\source\\\\repos\\\\guesstimoji\\\\app\\\\src\\\\game\\\\game.page.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from \"react\";\nimport RoomName from \"./RoomName\";\nimport OpponentBoard from \"./OpponentBoard\";\nimport Board from \"./Board\";\nimport GameLog from \"./GameLog\";\nimport queryString from \"query-string\";\nimport socket from \"../socketlocal\";\nimport \"../index.css\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { turnSubmitted, cleared } from \"../redux/gameLogSlice\";\nimport { clicked } from \"../redux/opponentBoardSlice\"; //import socket from '../../socket';\n// This is the VIEW in MVC\n// props are a way of passing data from parent to child\n//      props are passed to the component\n// state is reserved for interactivity\n//      states are modified within the component\n// I can send requests with the root room\n// the response will go to the game specific room\n// I need to figure out how to pass down the values\n\nconst GamePage = ({\n  socket,\n  roomID,\n  roomFull,\n  board,\n  player,\n  gameCount,\n  winner\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (roomFull) {\n      socket.on(\"server:gameLog/turnSubmitted\", turnData => {\n        dispatch(turnSubmitted(turnData));\n      });\n      socket.on(\"server:opponentBoard/clicked\", index => {\n        dispatch(clicked(index));\n      });\n    } else {\n      socket.off(\"server:gameLog/turnSubmitted\");\n      socket.off(\"server:opponentBoard/clicked\");\n    }\n  }, [roomFull]);\n  useEffect(() => {\n    socket.on(\"server:gameLog/cleared\", () => {\n      dispatch(cleared());\n    });\n  }, []); // make sure that you check to see if you can import socket\n  // or have to pass it as prop\n  // the empty array tells useEffect to only run once\n  // state changes in a useEffect could cause an inf loop\n\n  /*\r\n  useEffect(() => {\r\n    if(socket.room !== roomQuery ){\r\n      socket.emit(\"subscribe\", roomQuery);\r\n      console.log(`Subscribed to ${socket.room} in useEffect`);\r\n    }\r\n  });\r\n  */\n  // the component will be mounted if the player number is found\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(RoomName, {\n        roomID: roomID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(OpponentBoard, {\n        board: board,\n        socket: socket,\n        roomID: roomID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        board: board,\n        socket: socket,\n        roomID: roomID,\n        player: player\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GameLog, {\n        socket: socket,\n        roomID: roomID,\n        roomFull: roomFull,\n        player: player,\n        winner: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}; // there will need to be two boards\n// I chose squares to be a state because\n// I want the user to modify the board\n// Board\n//    states\n//        squares\n// if the onClick function is going to modify squares\n// it needs to be in the scope of Board\n// thus, it needs to be a prop of square\n// this is why I am not making Board a functional component\n// TODO : learn why it is bad to define functions\n//        inside functional components\n// OpponentBoard will listen and update remotely\n// Board will emit and update locally\n// Square\n//    props\n//      value\n//      onClick\n\n\n_s(GamePage, \"AgIJcfH1H12KzRN1QiO1ExB/+eo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = GamePage;\n\nconst mapStateToProps = state => ({ ...state.room\n});\n\nconst mapDispatchToProps = {\n  turnSubmitted,\n  cleared\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/tomwo_26b3mwb/source/repos/guesstimoji/app/src/game/game.page.js"],"names":["React","Component","useEffect","useState","RoomName","OpponentBoard","Board","GameLog","queryString","socket","connect","useDispatch","turnSubmitted","cleared","clicked","GamePage","roomID","roomFull","board","player","gameCount","winner","dispatch","on","turnData","index","off","mapStateToProps","state","room","mapDispatchToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,OAAO,cAAP;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,uBAAvC;AACA,SAASC,OAAT,QAAwB,6BAAxB,C,CACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AAChBN,EAAAA,MADgB;AAEhBO,EAAAA,MAFgB;AAGhBC,EAAAA,QAHgB;AAIhBC,EAAAA,KAJgB;AAKhBC,EAAAA,MALgB;AAMhBC,EAAAA,SANgB;AAOhBC,EAAAA;AAPgB,CAAD,KAQX;AAAA;;AACJ,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AACAT,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,QAAJ,EAAc;AACZR,MAAAA,MAAM,CAACc,EAAP,CAAU,8BAAV,EAA2CC,QAAD,IAAc;AACtDF,QAAAA,QAAQ,CAACV,aAAa,CAACY,QAAD,CAAd,CAAR;AACD,OAFD;AAGAf,MAAAA,MAAM,CAACc,EAAP,CAAU,8BAAV,EAA2CE,KAAD,IAAW;AACnDH,QAAAA,QAAQ,CAACR,OAAO,CAACW,KAAD,CAAR,CAAR;AACD,OAFD;AAGD,KAPD,MAOO;AACLhB,MAAAA,MAAM,CAACiB,GAAP,CAAW,8BAAX;AACAjB,MAAAA,MAAM,CAACiB,GAAP,CAAW,8BAAX;AACD;AACF,GAZQ,EAYN,CAACT,QAAD,CAZM,CAAT;AAaAf,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,MAAM,CAACc,EAAP,CAAU,wBAAV,EAAoC,MAAM;AACxCD,MAAAA,QAAQ,CAACT,OAAO,EAAR,CAAR;AACD,KAFD;AAGD,GAJQ,EAIN,EAJM,CAAT,CAfI,CAqBJ;AACA;AACA;AAEA;;AACA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AAEE;;AACA,sBACE;AAAA,2BACE;AAAA,8BACE,QAAC,QAAD;AAAU,QAAA,MAAM,EAAEG;AAAlB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,aAAD;AAAe,QAAA,KAAK,EAAEE,KAAtB;AAA6B,QAAA,MAAM,EAAET,MAArC;AAA6C,QAAA,MAAM,EAAEO;AAArD;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEE,KAAd;AAAqB,QAAA,MAAM,EAAET,MAA7B;AAAqC,QAAA,MAAM,EAAEO,MAA7C;AAAqD,QAAA,MAAM,EAAEG;AAA7D;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE,QAAC,OAAD;AACE,QAAA,MAAM,EAAEV,MADV;AAEE,QAAA,MAAM,EAAEO,MAFV;AAGE,QAAA,QAAQ,EAAEC,QAHZ;AAIE,QAAA,MAAM,EAAEE,MAJV;AAKE,QAAA,MAAM,EAAEE;AALV;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAmBD,CA/DD,C,CAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;GArFMN,Q;UASaJ,W;;;KATbI,Q;;AAuFN,MAAMY,eAAe,GAAIC,KAAD,KAAY,EAClC,GAAGA,KAAK,CAACC;AADyB,CAAZ,CAAxB;;AAIA,MAAMC,kBAAkB,GAAG;AACzBlB,EAAAA,aADyB;AAEzBC,EAAAA;AAFyB,CAA3B;AAKA,eAAeH,OAAO,CAACiB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6Cf,QAA7C,CAAf","sourcesContent":["import React, { Component, useEffect, useState } from \"react\";\r\nimport RoomName from \"./RoomName\";\r\nimport OpponentBoard from \"./OpponentBoard\";\r\nimport Board from \"./Board\";\r\nimport GameLog from \"./GameLog\";\r\nimport queryString from \"query-string\";\r\nimport socket from \"../socketlocal\";\r\nimport \"../index.css\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { turnSubmitted, cleared } from \"../redux/gameLogSlice\";\r\nimport { clicked } from \"../redux/opponentBoardSlice\";\r\n//import socket from '../../socket';\r\n\r\n// This is the VIEW in MVC\r\n\r\n// props are a way of passing data from parent to child\r\n//      props are passed to the component\r\n// state is reserved for interactivity\r\n//      states are modified within the component\r\n\r\n// I can send requests with the root room\r\n// the response will go to the game specific room\r\n\r\n// I need to figure out how to pass down the values\r\nconst GamePage = ({\r\n  socket,\r\n  roomID,\r\n  roomFull,\r\n  board,\r\n  player,\r\n  gameCount,\r\n  winner,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (roomFull) {\r\n      socket.on(\"server:gameLog/turnSubmitted\", (turnData) => {\r\n        dispatch(turnSubmitted(turnData));\r\n      });\r\n      socket.on(\"server:opponentBoard/clicked\", (index) => {\r\n        dispatch(clicked(index));\r\n      });\r\n    } else {\r\n      socket.off(\"server:gameLog/turnSubmitted\");\r\n      socket.off(\"server:opponentBoard/clicked\");\r\n    }\r\n  }, [roomFull]);\r\n  useEffect(() => {\r\n    socket.on(\"server:gameLog/cleared\", () => {\r\n      dispatch(cleared());\r\n    });\r\n  }, []);\r\n\r\n  // make sure that you check to see if you can import socket\r\n  // or have to pass it as prop\r\n  // the empty array tells useEffect to only run once\r\n\r\n  // state changes in a useEffect could cause an inf loop\r\n  /*\r\n  useEffect(() => {\r\n    if(socket.room !== roomQuery ){\r\n      socket.emit(\"subscribe\", roomQuery);\r\n      console.log(`Subscribed to ${socket.room} in useEffect`);\r\n    }\r\n  });\r\n  */\r\n\r\n  // the component will be mounted if the player number is found\r\n  return (\r\n    <div>\r\n      <div>\r\n        <RoomName roomID={roomID} />\r\n        <OpponentBoard board={board} socket={socket} roomID={roomID} />\r\n        <Board board={board} socket={socket} roomID={roomID} player={player} />\r\n        <GameLog\r\n          socket={socket}\r\n          roomID={roomID}\r\n          roomFull={roomFull}\r\n          player={player}\r\n          winner={winner}\r\n        />\r\n        {\r\n          // Need 'Leave Room' button\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// there will need to be two boards\r\n// I chose squares to be a state because\r\n// I want the user to modify the board\r\n// Board\r\n//    states\r\n//        squares\r\n// if the onClick function is going to modify squares\r\n// it needs to be in the scope of Board\r\n// thus, it needs to be a prop of square\r\n// this is why I am not making Board a functional component\r\n// TODO : learn why it is bad to define functions\r\n//        inside functional components\r\n\r\n// OpponentBoard will listen and update remotely\r\n\r\n// Board will emit and update locally\r\n\r\n// Square\r\n//    props\r\n//      value\r\n//      onClick\r\n\r\nconst mapStateToProps = (state) => ({\r\n  ...state.room,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  turnSubmitted,\r\n  cleared,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n"]},"metadata":{},"sourceType":"module"}
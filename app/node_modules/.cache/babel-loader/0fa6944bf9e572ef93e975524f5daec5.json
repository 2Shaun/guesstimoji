{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\tomwo_26b3mwb\\\\source\\\\repos\\\\guesstimoji\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"; // import socket from \"./socket\";\n\nimport socket from \"./socketlocal\";\nimport HomePage from \"./home.page\";\nimport GamePage from \"./game/game.page\";\nimport Footer from \"./footer\";\nimport \"./index.css\";\nimport { connect } from \"react-redux\";\nimport { homePageLoaded, roomJoined } from \"./redux/roomSlice\";\nimport { getBoards, getEmojis, addGetEmojiResponseAsBoard, graphQlPost } from \"./apiUtils\";\nimport { gotBoards } from \"./redux/boardsSlice\";\nimport { gotRooms } from \"./redux/roomsSlice\"; // view layer\n// handleJoin data should have both id and board selection\n// the first argument to a component is always the props obj\n\nconst App = ({\n  roomJoined,\n  homePageLoaded,\n  gotBoards,\n  gotRooms,\n  roomID,\n  player\n}) => {\n  _s();\n\n  useEffect(() => {\n    getBoards('{getBoards{emojis}}').then(res => res.map(x => x.emojis)).then(boards => {\n      console.log(\"gotBoards\");\n      gotBoards(boards);\n    }).catch(err => console.error(err));\n    getEmojis({\n      group: \"Smileys & Emotion\"\n    }).then(array => array.map(x => x.emoji)).then(array => homePageLoaded(array[Math.floor(Math.random() * array.length)])).catch(err => {\n      homePageLoaded(\"❌\");\n      console.error(err);\n    });\n    socket.emit(\"client:rooms/roomsRequested\");\n    socket.on(\"server:rooms/roomsResponded\", rooms => {\n      console.log('rooms responded');\n      gotRooms(rooms);\n    });\n  }, []);\n  /*\n  // add boards\n  useEffect(() => {\n    getEmojis({ group: \"Animals & Nature\" }).then((arr) => addGetEmojiResponseAsBoard(arr)).then((str) => graphQlPost(str));\n  }, []);\n  */\n\n  useEffect(() => {\n    console.log('QUERY TEST:', getEmojis({\n      group: \"Animals & Nature\"\n    }));\n  }, []);\n\n  const handleJoin = joinData => {\n    console.log(\"handleJoin -> joinData\", joinData);\n    socket.emit(\"client:room/roomJoined\", joinData);\n    socket.on(\"server:room/roomJoined\", joinData => {\n      if (joinData) {\n        roomJoined(joinData);\n      } else {\n        return;\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    align: \"center\",\n    children: [// player should only be defined if you're in a room\n    // might wanna turn this into a switch statement\n    // page state = {home, game, find}\n    player ? /*#__PURE__*/_jsxDEV(GamePage, {\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 11\n    }, this) : /*#__PURE__*/_jsxDEV(HomePage, {\n      handleJoin: handleJoin,\n      roomID: roomID,\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"3ubReDTFssvu4DHeldAg55cW/CI=\");\n\n_c = App;\n\nconst mapStateToProps = state => ({\n  roomID: state.room.roomID,\n  player: state.room.player\n}); // actions : {type: TYPE, ...} ARE OBJECTS\n// actionCreators : (obj) => {...action, ...obj} RETURN ACTIONS\n// mapDispatchToProps will redefine actionCreators as such:\n//      actionCreator(e) = dispatch(actionCreator(e))\n// dispatch will give the new action to the reducer who can access state\n// reducers : (state, action) => state'\n// in order for Redux to wrap dispatch around roomJoined,\n// it needs to be passed as a prop\n\n\nconst mapDispatchToProps = {\n  roomJoined,\n  gotBoards,\n  gotRooms,\n  homePageLoaded\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["C:/Users/tomwo_26b3mwb/source/repos/guesstimoji/src/App.js"],"names":["React","useEffect","useState","BrowserRouter","Router","Switch","Route","socket","HomePage","GamePage","Footer","connect","homePageLoaded","roomJoined","getBoards","getEmojis","addGetEmojiResponseAsBoard","graphQlPost","gotBoards","gotRooms","App","roomID","player","then","res","map","x","emojis","boards","console","log","catch","err","error","group","array","emoji","Math","floor","random","length","emit","on","rooms","handleJoin","joinData","mapStateToProps","state","room","mapDispatchToProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n// import socket from \"./socket\";\nimport socket from \"./socketlocal\";\nimport HomePage from \"./home.page\";\nimport GamePage from \"./game/game.page\";\nimport Footer from \"./footer\";\nimport \"./index.css\";\nimport { connect } from \"react-redux\";\nimport { homePageLoaded, roomJoined } from \"./redux/roomSlice\";\nimport { getBoards, getEmojis, addGetEmojiResponseAsBoard, graphQlPost } from \"./apiUtils\";\nimport { gotBoards } from \"./redux/boardsSlice\";\nimport { gotRooms } from \"./redux/roomsSlice\";\n// view layer\n\n\n// handleJoin data should have both id and board selection\n\n// the first argument to a component is always the props obj\nconst App = ({ roomJoined, homePageLoaded, gotBoards, gotRooms, roomID, player }) => {\n  useEffect(() => {\n    getBoards('{getBoards{emojis}}')\n      .then((res) => res.map(x => x.emojis))\n      .then((boards) => { console.log(\"gotBoards\"); gotBoards(boards); })\n      .catch((err) => console.error(err));\n    getEmojis({ group: \"Smileys & Emotion\" })\n      .then(array => array.map(x => x.emoji))\n      .then(array => homePageLoaded(array[Math.floor(Math.random() * array.length)]))\n      .catch((err) => { homePageLoaded(\"❌\"); console.error(err); });\n    socket.emit(\"client:rooms/roomsRequested\");\n    socket.on(\"server:rooms/roomsResponded\", (rooms) => {\n      console.log('rooms responded');\n      gotRooms(rooms);\n    });\n  }, []);\n  /*\n  // add boards\n  useEffect(() => {\n    getEmojis({ group: \"Animals & Nature\" }).then((arr) => addGetEmojiResponseAsBoard(arr)).then((str) => graphQlPost(str));\n  }, []);\n  */\n  useEffect(() => {\n    console.log('QUERY TEST:', getEmojis({ group: \"Animals & Nature\" }));\n  }, []);\n  const handleJoin = (joinData) => {\n    console.log(\"handleJoin -> joinData\", joinData);\n    socket.emit(\"client:room/roomJoined\", joinData);\n    socket.on(\"server:room/roomJoined\", (joinData) => {\n      if (joinData) {\n        roomJoined(joinData);\n      } else {\n        return;\n      }\n    });\n  };\n  return (\n    <div className=\"App\" align=\"center\">\n      {\n        // player should only be defined if you're in a room\n        // might wanna turn this into a switch statement\n        // page state = {home, game, find}\n        player ?\n          <GamePage socket={socket} /> :\n          <HomePage handleJoin={handleJoin} roomID={roomID} socket={socket} />\n      }\n      <Footer />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  roomID: state.room.roomID,\n  player: state.room.player,\n});\n\n// actions : {type: TYPE, ...} ARE OBJECTS\n// actionCreators : (obj) => {...action, ...obj} RETURN ACTIONS\n// mapDispatchToProps will redefine actionCreators as such:\n//      actionCreator(e) = dispatch(actionCreator(e))\n// dispatch will give the new action to the reducer who can access state\n// reducers : (state, action) => state'\n\n// in order for Redux to wrap dispatch around roomJoined,\n// it needs to be passed as a prop\nconst mapDispatchToProps = {\n  roomJoined,\n  gotBoards,\n  gotRooms,\n  homePageLoaded,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n"]},"metadata":{},"sourceType":"module"}
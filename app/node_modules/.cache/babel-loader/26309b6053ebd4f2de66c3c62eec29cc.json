{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\tomwo_26b3mwb\\\\source\\\\repos\\\\guesstimoji\\\\app\\\\src\\\\game\\\\TurnHandler.js\";\nimport React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport PlayerTurn from \"./PlayerTurn\";\nimport OpponentTurn from \"./OpponentTurn\";\n\nconst TurnHandler = ({\n  socket,\n  player,\n  picked,\n  turn,\n  roomID,\n  roomFull,\n  handleSubmitTurn,\n  winner\n}) => {\n  // turn 1/2 is answering yes or no\n  // turn 2/2 is asking a question\n  // TURN CYCLE:\n  // player 2 turn 2/2  (turn 0)\n  // player 1 turn 1/2\n  // player 1 turn 2/2\n  // player 2 turn 1/2\n  const player1Turn = turn % 4 === 1 || turn % 4 === 2;\n  const player2Turn = !player1Turn;\n  const playerTurn = player === 1 && player1Turn || player === 2 && player2Turn;\n  const askingTurn = turn % 2 === 0;\n  const opponent = player % 2 + 1; // message can be populated with yes/no button or\n  // if send is available as soon as you join\n  // the gameLog room for player 2 will need to be updated when they join\n\n  if (winner) {\n    // need 'New Game' button which brings up board select for player 1\n    // need 'Waiting for Player 1 to start a new game...' for player 2\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"GAME OVER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 12\n    }, this);\n  } else if (!roomFull) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Waiting for Player 2 to join...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 12\n    }, this);\n  } else if (!picked) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 12\n    }, this);\n  } else {\n    return playerTurn ? /*#__PURE__*/_jsxDEV(PlayerTurn, {\n      handleSubmitTurn: handleSubmitTurn,\n      askingTurn: askingTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(OpponentTurn, {\n      opponent: opponent,\n      askingTurn: askingTurn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this);\n  }\n};\n\n_c = TurnHandler;\n\nconst mapStateToProps = state => ({\n  picked: state.player\n});\n\nexport default connect(mapStateToProps, null)(TurnHandler);\n\nvar _c;\n\n$RefreshReg$(_c, \"TurnHandler\");","map":{"version":3,"sources":["C:/Users/tomwo_26b3mwb/source/repos/guesstimoji/app/src/game/TurnHandler.js"],"names":["React","useEffect","useState","connect","PlayerTurn","OpponentTurn","TurnHandler","socket","player","picked","turn","roomID","roomFull","handleSubmitTurn","winner","player1Turn","player2Turn","playerTurn","askingTurn","opponent","mapStateToProps","state"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,WAAW,GAAG,CAAC;AACnBC,EAAAA,MADmB;AAEnBC,EAAAA,MAFmB;AAGnBC,EAAAA,MAHmB;AAInBC,EAAAA,IAJmB;AAKnBC,EAAAA,MALmB;AAMnBC,EAAAA,QANmB;AAOnBC,EAAAA,gBAPmB;AAQnBC,EAAAA;AARmB,CAAD,KASd;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAMC,WAAW,GAAGL,IAAI,GAAG,CAAP,KAAa,CAAb,IAAkBA,IAAI,GAAG,CAAP,KAAa,CAAnD;AACA,QAAMM,WAAW,GAAG,CAACD,WAArB;AACA,QAAME,UAAU,GACbT,MAAM,KAAK,CAAX,IAAgBO,WAAjB,IAAkCP,MAAM,KAAK,CAAX,IAAgBQ,WADpD;AAEA,QAAME,UAAU,GAAGR,IAAI,GAAG,CAAP,KAAa,CAAhC;AACA,QAAMS,QAAQ,GAAIX,MAAM,GAAG,CAAV,GAAe,CAAhC,CAbI,CAeJ;AAEA;AACA;;AACA,MAAIM,MAAJ,EAAY;AACV;AACA;AACA,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAJD,MAIO,IAAI,CAACF,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA,IAAI,CAACH,MAAL,EAAa;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,WAAOQ,UAAU,gBACf,QAAC,UAAD;AAAY,MAAA,gBAAgB,EAAEJ,gBAA9B;AAAgD,MAAA,UAAU,EAAEK;AAA5D;AAAA;AAAA;AAAA;AAAA,YADe,gBAGb,QAAC,YAAD;AAAc,MAAA,QAAQ,EAAEC,QAAxB;AAAkC,MAAA,UAAU,EAAED;AAA9C;AAAA;AAAA;AAAA;AAAA,YAHJ;AAKD;AACF,CA3CD;;KAAMZ,W;;AA6CN,MAAMc,eAAe,GAAIC,KAAD,KAAY;AAClCZ,EAAAA,MAAM,EAAEY,KAAK,CAACb;AADoB,CAAZ,CAAxB;;AAIA,eAAeL,OAAO,CAACiB,eAAD,EAAkB,IAAlB,CAAP,CAA+Bd,WAA/B,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PlayerTurn from \"./PlayerTurn\";\r\nimport OpponentTurn from \"./OpponentTurn\";\r\n\r\nconst TurnHandler = ({\r\n  socket,\r\n  player,\r\n  picked,\r\n  turn,\r\n  roomID,\r\n  roomFull,\r\n  handleSubmitTurn,\r\n  winner,\r\n}) => {\r\n  // turn 1/2 is answering yes or no\r\n  // turn 2/2 is asking a question\r\n  // TURN CYCLE:\r\n  // player 2 turn 2/2  (turn 0)\r\n  // player 1 turn 1/2\r\n  // player 1 turn 2/2\r\n  // player 2 turn 1/2\r\n  const player1Turn = turn % 4 === 1 || turn % 4 === 2;\r\n  const player2Turn = !player1Turn;\r\n  const playerTurn =\r\n    (player === 1 && player1Turn) || (player === 2 && player2Turn);\r\n  const askingTurn = turn % 2 === 0;\r\n  const opponent = (player % 2) + 1;\r\n\r\n  // message can be populated with yes/no button or\r\n\r\n  // if send is available as soon as you join\r\n  // the gameLog room for player 2 will need to be updated when they join\r\n  if (winner) {\r\n    // need 'New Game' button which brings up board select for player 1\r\n    // need 'Waiting for Player 1 to start a new game...' for player 2\r\n    return <div>GAME OVER</div>;\r\n  } else if (!roomFull) {\r\n    return <div>Waiting for Player 2 to join...</div>;\r\n  } else if (!picked) {\r\n    return <div></div>;\r\n  } else {\r\n    return playerTurn ? (\r\n      <PlayerTurn handleSubmitTurn={handleSubmitTurn} askingTurn={askingTurn} />\r\n    ) : (\r\n        <OpponentTurn opponent={opponent} askingTurn={askingTurn} />\r\n      );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  picked: state.player,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TurnHandler);\r\n"]},"metadata":{},"sourceType":"module"}
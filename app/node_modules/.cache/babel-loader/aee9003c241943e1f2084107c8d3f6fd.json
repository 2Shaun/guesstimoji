{"ast":null,"code":"const graphQlApiUrl = 'http://localhost:3005/graphql';\nexport const graphQlPost = async query => {\n  const res = await fetch(graphQlApiUrl, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query\n    })\n  }).then(res => res.json()).then(json => {\n    console.log(`response from ${query}: `, json.data);\n    return json.data;\n  }).catch(err => {\n    console.error(err);\n  });\n  return res;\n};\nexport const argsJsonStringify = argsObject => {\n  return argsObject ? JSON.stringify(argsObject) // removes quotes from keys\n  .replace(/\"([^\"]+)\":/g, '$1:').replace(\"{\", \"(\").replace(\"}\", \")\") : \"\";\n};\nexport const fetchGraphQLData = query => fetch(graphQlApiUrl, {\n  method: 'POST',\n  credentials: 'same-origin',\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  body: JSON.stringify({\n    query\n  })\n}).then(res => res.json()).then(json => {\n  console.log(`response from ${query}: `, json.data);\n  return json.data;\n}).catch(err => {\n  console.error(err);\n});\nexport const getEmojis = async (argsObject = null) => {\n  const args = argsJsonStringify(argsObject); // {getEmojis(group: \"Smileys & Emotion\"){emoji}}\n\n  const query = `\n        {\n            getEmojis${args}{\n                emoji\n            }\n        } \n    `;\n  const promiseResult = await fetchGraphQLData(query);\n  return promiseResult.getEmojis; // return json.data.getEmojis;\n};\nexport const getBoards = async query => {\n  const boards = await fetch(graphQlApiUrl, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query\n    })\n  }).then(res => res.json()).then(json => {\n    console.log(`response from ${query}: `, json.data.getBoards);\n    return json.data.getBoards;\n  }).catch(err => {\n    console.error(err);\n  });\n  return boards;\n};\n\nconst createBoard = async mutation => {\n  console.log(\"createBoard -> mutation\", mutation);\n  const board = await fetch(graphQlApiUrl, {\n    method: 'POST',\n    credentials: 'same-origin',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      query: mutation\n    })\n  }).then(res => res.json()).then(json => {\n    console.log(`response from ${mutation}: `, json.data.getEmojis);\n    return json.data.getEmojis;\n  }).catch(err => {\n    console.error(err);\n  });\n  ;\n  return board;\n};\n\nexport const addGetEmojiResponseAsBoard = array => // the beginning of query\n'mutation{createBoard(emojis: [\"' // create array of emoji strings\n+ array.map(x => x.emoji) // take only first 40 elements\n.slice(80, 120) // create a string with elements\n.join('\",\"') + '\"]){emojis}}';","map":{"version":3,"sources":["C:/Users/tomwo_26b3mwb/source/repos/guesstimoji/app/src/apiUtils.js"],"names":["graphQlApiUrl","graphQlPost","query","res","fetch","method","credentials","headers","body","JSON","stringify","then","json","console","log","data","catch","err","error","argsJsonStringify","argsObject","replace","fetchGraphQLData","getEmojis","args","promiseResult","getBoards","boards","createBoard","mutation","board","addGetEmojiResponseAsBoard","array","map","x","emoji","slice","join"],"mappings":"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","sourcesContent":["const graphQlApiUrl = 'http://localhost:3005/graphql';\n\nexport const graphQlPost = async (query) => {\n    const res = await fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n    })\n        .then(res => res.json())\n        .then(json => {\n            console.log(`response from ${query}: `, json.data)\n            return json.data;\n        })\n        .catch((err) => { console.error(err); });\n    return res;\n}\n\nexport const argsJsonStringify = (argsObject) => {\n    return argsObject\n        ? JSON.stringify(argsObject)\n            // removes quotes from keys\n            .replace(/\"([^\"]+)\":/g, '$1:')\n            .replace(\"{\", \"(\")\n            .replace(\"}\", \")\")\n        : \"\";\n}\n\nexport const fetchGraphQLData = (query) =>\n    (fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n\n    }).then(res => res.json())\n        .then(json => {\n            console.log(`response from ${query}: `, json.data);\n            return json.data;\n\n        }).catch((err) => { console.error(err); }));\n\n\nexport const getEmojis = async (argsObject = null) => {\n    const args = argsJsonStringify(argsObject);\n    // {getEmojis(group: \"Smileys & Emotion\"){emoji}}\n    const query = `\n        {\n            getEmojis${args}{\n                emoji\n            }\n        } \n    `;\n    const promiseResult = await fetchGraphQLData(query);\n    return promiseResult.getEmojis;\n    // return json.data.getEmojis;\n}\n\nexport const getBoards = async (query) => {\n    const boards = await fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n    })\n        .then(res => res.json())\n        .then(json => {\n            console.log(`response from ${query}: `, json.data.getBoards)\n            return json.data.getBoards;\n        })\n        .catch((err) => { console.error(err); });\n    return boards;\n}\n\nconst createBoard = async (mutation) => {\n    console.log(\"createBoard -> mutation\", mutation);\n    const board = await fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query: mutation }),\n    })\n        .then(res => res.json())\n        .then(json => {\n            console.log(`response from ${mutation}: `, json.data.getEmojis)\n            return json.data.getEmojis;\n        })\n        .catch((err) => { console.error(err); });\n    ;\n    return board;\n}\n\nexport const addGetEmojiResponseAsBoard = (array) =>\n    // the beginning of query\n    'mutation{createBoard(emojis: [\"'\n    // create array of emoji strings\n    + array.map(x => x.emoji)\n        // take only first 40 elements\n        .slice(80, 120)\n        // create a string with elements\n        .join('\",\"')\n    + '\"]){emojis}}';\n"]},"metadata":{},"sourceType":"module"}
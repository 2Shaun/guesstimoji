{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\tomwo_26b3mwb\\\\source\\\\repos\\\\guesstimoji\\\\app\\\\src\\\\game\\\\GameLog.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TurnHandler from \"./TurnHandler\";\nimport { connect, useDispatch } from \"react-redux\";\nimport { turnSubmitted } from \"../redux/gameLogSlice\";\n\nconst GameLog = ({\n  socket,\n  roomID,\n  roomFull,\n  gameLog,\n  player,\n  winner\n}) => {\n  _s();\n\n  const opponent = player % 2 + 1;\n  console.log(\"GameLog -> player\", player);\n  console.log(\"GameLog -> opponent\", opponent);\n  const dispatch = useDispatch();\n\n  const handleSubmitTurn = untrimmedMessage => {\n    const message = untrimmedMessage.trim();\n    socket.emit(\"client:gameLog/turnSubmitted\", {\n      player: player,\n      message: message\n    });\n    dispatch(turnSubmitted({\n      username: \"You\",\n      message: message\n    }));\n  };\n\n  const renderGameLog = () => {\n    // the second argument of map is optional, takes in the index\n    // of the element\n    // don't use curly brace tuples that don't have tags!!\n    return gameLog.map(({\n      username: username,\n      message: message\n    }, i) => /*#__PURE__*/_jsxDEV(\"div\", {\n      class: i === 0 ? 'game-log-last-message' : 'game-log-message',\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: username + ':'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, i, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(TurnHandler, {\n      socket: socket,\n      player: player,\n      turn: gameLog.length,\n      roomID: roomID,\n      roomFull: roomFull,\n      handleSubmitTurn: handleSubmitTurn,\n      winner: winner\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"game-log-box\",\n      children: renderGameLog()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n\n_s(GameLog, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\n_c = GameLog;\n\nconst mapStateToProps = state => ({\n  gameLog: state.gameLog\n});\n\nconst mapDispatchToProps = {\n  turnSubmitted\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GameLog);\n\nvar _c;\n\n$RefreshReg$(_c, \"GameLog\");","map":{"version":3,"sources":["C:/Users/tomwo_26b3mwb/source/repos/guesstimoji/app/src/game/GameLog.js"],"names":["React","useEffect","useState","TurnHandler","connect","useDispatch","turnSubmitted","GameLog","socket","roomID","roomFull","gameLog","player","winner","opponent","console","log","dispatch","handleSubmitTurn","untrimmedMessage","message","trim","emit","username","renderGameLog","map","i","length","mapStateToProps","state","mapDispatchToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,aAAT,QAA8B,uBAA9B;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,MAAF;AAAUC,EAAAA,MAAV;AAAkBC,EAAAA,QAAlB;AAA4BC,EAAAA,OAA5B;AAAqCC,EAAAA,MAArC;AAA6CC,EAAAA;AAA7C,CAAD,KAA2D;AAAA;;AACzE,QAAMC,QAAQ,GAAIF,MAAM,GAAG,CAAV,GAAe,CAAhC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCJ,MAAjC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,QAAnC;AACA,QAAMG,QAAQ,GAAGZ,WAAW,EAA5B;;AAEA,QAAMa,gBAAgB,GAAIC,gBAAD,IAAsB;AAC7C,UAAMC,OAAO,GAAGD,gBAAgB,CAACE,IAAjB,EAAhB;AACAb,IAAAA,MAAM,CAACc,IAAP,CAAY,8BAAZ,EAA4C;AAC1CV,MAAAA,MAAM,EAAEA,MADkC;AAE1CQ,MAAAA,OAAO,EAAEA;AAFiC,KAA5C;AAIAH,IAAAA,QAAQ,CAACX,aAAa,CAAC;AAAEiB,MAAAA,QAAQ,EAAE,KAAZ;AAAmBH,MAAAA,OAAO,EAAEA;AAA5B,KAAD,CAAd,CAAR;AACD,GAPD;;AASA,QAAMI,aAAa,GAAG,MAAM;AAC1B;AACA;AACA;AACA,WAAOb,OAAO,CAACc,GAAR,CAAY,CAAC;AAAEF,MAAAA,QAAQ,EAAEA,QAAZ;AAAsBH,MAAAA,OAAO,EAAEA;AAA/B,KAAD,EAA2CM,CAA3C,kBACjB;AAAK,MAAA,KAAK,EAAEA,CAAC,KAAK,CAAN,GAAU,uBAAV,GAAoC,kBAAhD;AAAA,8BACE;AAAA,kBAAOH,QAAQ,GAAG;AAAlB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,kBAAOH;AAAP;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA,OAAyEM,CAAzE;AAAA;AAAA;AAAA;AAAA,YADK,CAAP;AAMD,GAVD;;AAWA,sBACE;AAAA,4BACE,QAAC,WAAD;AACE,MAAA,MAAM,EAAElB,MADV;AAEE,MAAA,MAAM,EAAEI,MAFV;AAGE,MAAA,IAAI,EAAED,OAAO,CAACgB,MAHhB;AAIE,MAAA,MAAM,EAAElB,MAJV;AAKE,MAAA,QAAQ,EAAEC,QALZ;AAME,MAAA,gBAAgB,EAAEQ,gBANpB;AAOE,MAAA,MAAM,EAAEL;AAPV;AAAA;AAAA;AAAA;AAAA,YADF,eAUE;AAAK,MAAA,KAAK,EAAC,cAAX;AAAA,gBAA2BW,aAAa;AAAxC;AAAA;AAAA;AAAA;AAAA,YAVF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAcD,CAxCD;;GAAMjB,O;UAIaF,W;;;KAJbE,O;;AA0CN,MAAMqB,eAAe,GAAIC,KAAD,KAAY;AAClClB,EAAAA,OAAO,EAAEkB,KAAK,CAAClB;AADmB,CAAZ,CAAxB;;AAIA,MAAMmB,kBAAkB,GAAG;AACzBxB,EAAAA;AADyB,CAA3B;AAIA,eAAeF,OAAO,CAACwB,eAAD,EAAkBE,kBAAlB,CAAP,CAA6CvB,OAA7C,CAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport TurnHandler from \"./TurnHandler\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { turnSubmitted } from \"../redux/gameLogSlice\";\r\n\r\nconst GameLog = ({ socket, roomID, roomFull, gameLog, player, winner }) => {\r\n  const opponent = (player % 2) + 1;\r\n  console.log(\"GameLog -> player\", player);\r\n  console.log(\"GameLog -> opponent\", opponent);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmitTurn = (untrimmedMessage) => {\r\n    const message = untrimmedMessage.trim();\r\n    socket.emit(\"client:gameLog/turnSubmitted\", {\r\n      player: player,\r\n      message: message,\r\n    });\r\n    dispatch(turnSubmitted({ username: \"You\", message: message }));\r\n  };\r\n\r\n  const renderGameLog = () => {\r\n    // the second argument of map is optional, takes in the index\r\n    // of the element\r\n    // don't use curly brace tuples that don't have tags!!\r\n    return gameLog.map(({ username: username, message: message }, i) => (\r\n      <div class={i === 0 ? 'game-log-last-message' : 'game-log-message'} key={i}>\r\n        <span>{username + ':'}</span>\r\n        <span>{message}</span>\r\n      </div>\r\n    ));\r\n  };\r\n  return (\r\n    <div>\r\n      <TurnHandler\r\n        socket={socket}\r\n        player={player}\r\n        turn={gameLog.length}\r\n        roomID={roomID}\r\n        roomFull={roomFull}\r\n        handleSubmitTurn={handleSubmitTurn}\r\n        winner={winner}\r\n      />\r\n      <div class=\"game-log-box\">{renderGameLog()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  gameLog: state.gameLog,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  turnSubmitted,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameLog);\r\n"]},"metadata":{},"sourceType":"module"}
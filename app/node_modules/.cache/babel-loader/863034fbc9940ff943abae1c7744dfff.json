{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\tomwo_26b3mwb\\\\source\\\\repos\\\\guesstimoji\\\\app\\\\src\\\\game\\\\game.page.js\",\n    _s = $RefreshSig$();\n\nimport React, { Component, useEffect, useState } from 'react';\nimport RoomName from './RoomName';\nimport OpponentBoard from './OpponentBoard';\nimport Board from './Board';\nimport GameLog from './GameLog';\nimport queryString from 'query-string';\nimport '../index.css';\nimport { connect, useDispatch } from 'react-redux';\nimport { turnSubmitted, cleared } from '../redux/gameLogSlice';\nimport { clicked } from '../redux/opponentBoardSlice';\nimport socket from '../socket'; // This is the VIEW in MVC\n// props are a way of passing data from parent to child\n//      props are passed to the component\n// state is reserved for interactivity\n//      states are modified within the component\n// I can send requests with the root room\n// the response will go to the game specific room\n// I need to figure out how to pass down the values\n\nconst GamePage = ({\n  socket,\n  roomID,\n  roomFull,\n  board,\n  player,\n  gameCount,\n  winner\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    if (roomFull) {\n      socket.on('server:gameLog/turnSubmitted', turnData => {\n        dispatch(turnSubmitted(turnData));\n      });\n      socket.on('server:opponentBoard/clicked', index => {\n        dispatch(clicked(index));\n      });\n    } else {\n      socket.off('server:gameLog/turnSubmitted');\n      socket.off('server:opponentBoard/clicked');\n    }\n  }, [roomFull]);\n  useEffect(() => {\n    socket.on('server:gameLog/cleared', () => {\n      dispatch(cleared());\n    });\n  }, []); // make sure that you check to see if you can import socket\n  // or have to pass it as prop\n  // the empty array tells useEffect to only run once\n  // state changes in a useEffect could cause an inf loop\n\n  /*\r\n   useEffect(() => {\r\n     if(socket.room !== roomQuery ){\r\n       socket.emit(\"subscribe\", roomQuery);\r\n       console.log(`Subscribed to ${socket.room} in useEffect`);\r\n     }\r\n   });\r\n   */\n  // the component will be mounted if the player number is found\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(RoomName, {\n        roomID: roomID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(OpponentBoard, {\n        board: board,\n        socket: socket,\n        roomID: roomID\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Board, {\n        board: board,\n        socket: socket,\n        roomID: roomID,\n        player: player\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(GameLog, {\n        socket: socket,\n        roomID: roomID,\n        roomFull: roomFull,\n        player: player,\n        winner: winner\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 4\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 3\n  }, this);\n}; // there will need to be two boards\n// I chose squares to be a state because\n// I want the user to modify the board\n// Board\n//    states\n//        squares\n// if the onClick function is going to modify squares\n// it needs to be in the scope of Board\n// thus, it needs to be a prop of square\n// this is why I am not making Board a functional component\n// TODO : learn why it is bad to define functions\n//        inside functional components\n// OpponentBoard will listen and update remotely\n// Board will emit and update locally\n// Square\n//    props\n//      value\n//      onClick\n\n\n_s(GamePage, \"AgIJcfH1H12KzRN1QiO1ExB/+eo=\", false, function () {\n  return [useDispatch];\n});\n\n_c = GamePage;\n\nconst mapStateToProps = state => ({ ...state.room\n});\n\nconst mapDispatchToProps = {\n  turnSubmitted,\n  cleared\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["C:/Users/tomwo_26b3mwb/source/repos/guesstimoji/app/src/game/game.page.js"],"names":["React","Component","useEffect","useState","RoomName","OpponentBoard","Board","GameLog","queryString","connect","useDispatch","turnSubmitted","cleared","clicked","socket","GamePage","roomID","roomFull","board","player","gameCount","winner","dispatch","on","turnData","index","off","mapStateToProps","state","room","mapDispatchToProps"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,QAAtC,QAAsD,OAAtD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAO,cAAP;AACA,SAASC,OAAT,EAAkBC,WAAlB,QAAqC,aAArC;AACA,SAASC,aAAT,EAAwBC,OAAxB,QAAuC,uBAAvC;AACA,SAASC,OAAT,QAAwB,6BAAxB;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA,MAAMC,QAAQ,GAAG,CAAC;AACjBD,EAAAA,MADiB;AAEjBE,EAAAA,MAFiB;AAGjBC,EAAAA,QAHiB;AAIjBC,EAAAA,KAJiB;AAKjBC,EAAAA,MALiB;AAMjBC,EAAAA,SANiB;AAOjBC,EAAAA;AAPiB,CAAD,KAQX;AAAA;;AACL,QAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACAR,EAAAA,SAAS,CAAC,MAAM;AACf,QAAIe,QAAJ,EAAc;AACbH,MAAAA,MAAM,CAACS,EAAP,CAAU,8BAAV,EAA2CC,QAAD,IAAc;AACvDF,QAAAA,QAAQ,CAACX,aAAa,CAACa,QAAD,CAAd,CAAR;AACA,OAFD;AAGAV,MAAAA,MAAM,CAACS,EAAP,CAAU,8BAAV,EAA2CE,KAAD,IAAW;AACpDH,QAAAA,QAAQ,CAACT,OAAO,CAACY,KAAD,CAAR,CAAR;AACA,OAFD;AAGA,KAPD,MAOO;AACNX,MAAAA,MAAM,CAACY,GAAP,CAAW,8BAAX;AACAZ,MAAAA,MAAM,CAACY,GAAP,CAAW,8BAAX;AACA;AACD,GAZQ,EAYN,CAACT,QAAD,CAZM,CAAT;AAaAf,EAAAA,SAAS,CAAC,MAAM;AACfY,IAAAA,MAAM,CAACS,EAAP,CAAU,wBAAV,EAAoC,MAAM;AACzCD,MAAAA,QAAQ,CAACV,OAAO,EAAR,CAAR;AACA,KAFD;AAGA,GAJQ,EAIN,EAJM,CAAT,CAfK,CAqBL;AACA;AACA;AAEA;;AACA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AAEC;;AACA,sBACC;AAAA,2BACC;AAAA,8BACC,QAAC,QAAD;AAAU,QAAA,MAAM,EAAEI;AAAlB;AAAA;AAAA;AAAA;AAAA,cADD,eAEC,QAAC,aAAD;AAAe,QAAA,KAAK,EAAEE,KAAtB;AAA6B,QAAA,MAAM,EAAEJ,MAArC;AAA6C,QAAA,MAAM,EAAEE;AAArD;AAAA;AAAA;AAAA;AAAA,cAFD,eAGC,QAAC,KAAD;AAAO,QAAA,KAAK,EAAEE,KAAd;AAAqB,QAAA,MAAM,EAAEJ,MAA7B;AAAqC,QAAA,MAAM,EAAEE,MAA7C;AAAqD,QAAA,MAAM,EAAEG;AAA7D;AAAA;AAAA;AAAA;AAAA,cAHD,eAIC,QAAC,OAAD;AACC,QAAA,MAAM,EAAEL,MADT;AAEC,QAAA,MAAM,EAAEE,MAFT;AAGC,QAAA,QAAQ,EAAEC,QAHX;AAIC,QAAA,MAAM,EAAEE,MAJT;AAKC,QAAA,MAAM,EAAEE;AALT;AAAA;AAAA;AAAA;AAAA,cAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,UADD;AAmBA,CA/DD,C,CAiEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;;;GArFMN,Q;UASYL,W;;;KATZK,Q;;AAuFN,MAAMY,eAAe,GAAIC,KAAD,KAAY,EACnC,GAAGA,KAAK,CAACC;AAD0B,CAAZ,CAAxB;;AAIA,MAAMC,kBAAkB,GAAG;AAC1BnB,EAAAA,aAD0B;AAE1BC,EAAAA;AAF0B,CAA3B;AAKA,eAAeH,OAAO,CAACkB,eAAD,EAAkBG,kBAAlB,CAAP,CAA6Cf,QAA7C,CAAf","sourcesContent":["import React, { Component, useEffect, useState } from 'react';\r\nimport RoomName from './RoomName';\r\nimport OpponentBoard from './OpponentBoard';\r\nimport Board from './Board';\r\nimport GameLog from './GameLog';\r\nimport queryString from 'query-string';\r\nimport '../index.css';\r\nimport { connect, useDispatch } from 'react-redux';\r\nimport { turnSubmitted, cleared } from '../redux/gameLogSlice';\r\nimport { clicked } from '../redux/opponentBoardSlice';\r\nimport socket from '../socket';\r\n\r\n// This is the VIEW in MVC\r\n\r\n// props are a way of passing data from parent to child\r\n//      props are passed to the component\r\n// state is reserved for interactivity\r\n//      states are modified within the component\r\n\r\n// I can send requests with the root room\r\n// the response will go to the game specific room\r\n\r\n// I need to figure out how to pass down the values\r\nconst GamePage = ({\r\n\tsocket,\r\n\troomID,\r\n\troomFull,\r\n\tboard,\r\n\tplayer,\r\n\tgameCount,\r\n\twinner,\r\n}) => {\r\n\tconst dispatch = useDispatch();\r\n\tuseEffect(() => {\r\n\t\tif (roomFull) {\r\n\t\t\tsocket.on('server:gameLog/turnSubmitted', (turnData) => {\r\n\t\t\t\tdispatch(turnSubmitted(turnData));\r\n\t\t\t});\r\n\t\t\tsocket.on('server:opponentBoard/clicked', (index) => {\r\n\t\t\t\tdispatch(clicked(index));\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tsocket.off('server:gameLog/turnSubmitted');\r\n\t\t\tsocket.off('server:opponentBoard/clicked');\r\n\t\t}\r\n\t}, [roomFull]);\r\n\tuseEffect(() => {\r\n\t\tsocket.on('server:gameLog/cleared', () => {\r\n\t\t\tdispatch(cleared());\r\n\t\t});\r\n\t}, []);\r\n\r\n\t// make sure that you check to see if you can import socket\r\n\t// or have to pass it as prop\r\n\t// the empty array tells useEffect to only run once\r\n\r\n\t// state changes in a useEffect could cause an inf loop\r\n\t/*\r\n  useEffect(() => {\r\n    if(socket.room !== roomQuery ){\r\n      socket.emit(\"subscribe\", roomQuery);\r\n      console.log(`Subscribed to ${socket.room} in useEffect`);\r\n    }\r\n  });\r\n  */\r\n\r\n\t// the component will be mounted if the player number is found\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<div>\r\n\t\t\t\t<RoomName roomID={roomID} />\r\n\t\t\t\t<OpponentBoard board={board} socket={socket} roomID={roomID} />\r\n\t\t\t\t<Board board={board} socket={socket} roomID={roomID} player={player} />\r\n\t\t\t\t<GameLog\r\n\t\t\t\t\tsocket={socket}\r\n\t\t\t\t\troomID={roomID}\r\n\t\t\t\t\troomFull={roomFull}\r\n\t\t\t\t\tplayer={player}\r\n\t\t\t\t\twinner={winner}\r\n\t\t\t\t/>\r\n\t\t\t\t{\r\n\t\t\t\t\t// Need 'Leave Room' button\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\n// there will need to be two boards\r\n// I chose squares to be a state because\r\n// I want the user to modify the board\r\n// Board\r\n//    states\r\n//        squares\r\n// if the onClick function is going to modify squares\r\n// it needs to be in the scope of Board\r\n// thus, it needs to be a prop of square\r\n// this is why I am not making Board a functional component\r\n// TODO : learn why it is bad to define functions\r\n//        inside functional components\r\n\r\n// OpponentBoard will listen and update remotely\r\n\r\n// Board will emit and update locally\r\n\r\n// Square\r\n//    props\r\n//      value\r\n//      onClick\r\n\r\nconst mapStateToProps = (state) => ({\r\n\t...state.room,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n\tturnSubmitted,\r\n\tcleared,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n"]},"metadata":{},"sourceType":"module"}
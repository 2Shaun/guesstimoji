{"version":3,"sources":["socket.js","Select.js","JoinRoomButton.js","HomePageDiv.js","apiUtils.js","home.page.js","game/RoomName.js","game/OpponentSquare.js","game/OpponentBoard.js","game/Square.js","game/PickTextBox.js","game/Board.js","redux/playersSlice.js","game/PlayerTurn.js","game/OpponentTurn.js","game/TurnHandler.js","redux/gameLogSlice.js","game/GameLog.js","game/game.page.js","socketlocal.js","redux/opponentBoardSlice.js","footer.js","redux/roomSlice.js","App.js","redux/boardsSlice.js","redux/roomsSlice.js","serviceWorker.js","redux/store.js","index.js"],"names":["socket","io","Select","header","emptyMessage","onClick","selections","id","length","map","_","index","autoFocus","JoinRoomButton","roomID","board","handleJoin","connect","state","boards","previews","rooms","useState","tempBoard","setTempBoard","tempRoomID","setTempRoomID","align","value","onChange","e","target","i","emit","graphQlApiUrl","argsJsonStringify","argsObject","JSON","stringify","replace","fetchGraphQLData","query","fetch","method","credentials","headers","body","then","res","json","console","log","data","catch","err","error","getEmojis","a","args","promiseResult","getBoards","randomSmiley","room","RoomName","props","OpponentSquare","className","show","opponentBoard","renderSquare","class","Square","onContextMenu","setShow","preventDefault","PickTextBox","pick","mapDispatchToProps","playerPicked","type","picked","player","setPick","handlePick","navigator","clipboard","writeText","alert","handleContextMenu","PlayerTurn","handleSubmitTurn","askingTurn","tempQuestion","setTempQuestion","placeholder","OpponentTurn","opponent","turn","roomFull","player1Turn","playerTurn","winner","turnSubmitted","turnData","payload","cleared","gameLog","dispatch","useDispatch","untrimmedMessage","message","trim","username","key","gameCount","useEffect","on","clicked","off","Footer","role","href","src","width","height","makeid","result","characters","charactersLength","charAt","Math","floor","random","roomJoined","joinData","gotBoards","gotRooms","homePageLoaded","emoji","x","emojis","group","array","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","Array","fill","retVal","store","createStore","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.097d55c7.chunk.js","sourcesContent":["import io from \"socket.io-client\";\r\nlet socket = io(\"http://157.245.254.196:5000/\");\r\nexport default socket;\r\n","import React from \"react\";\n\n// Select component which will take in rooms or preview\nconst Select = ({ header, emptyMessage, onClick, selections }) => {\n  return (\n    <>\n      <h3>{header}</h3>\n      <div id=\"board-select\">\n        {\n          selections != null && selections.length > 0\n            ? selections.map((_, index) => (\n              <button\n                id=\"board-select-button\"\n                onClick={() => onClick(index)}\n                autoFocus={index == 1}\n              >\n                {selections[index]}\n              </button>\n            ))\n            : `${emptyMessage}`\n        }\n      </div>\n    </>\n  );\n};\n\n\nexport default Select;\n","import React from \"react\";\r\n\r\nconst JoinRoomButton = ({ roomID, board, handleJoin }) => {\r\n  return (\r\n    <button\r\n      id=\"board-select-button\"\r\n      onClick={() => handleJoin({ roomID: roomID, board: board })}\r\n    >\r\n      PLAY\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default JoinRoomButton;\r\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Select from \"./Select\";\nimport JoinRoomButton from \"./JoinRoomButton\";\nimport { connect } from \"react-redux\";\n\nconst HomePageDiv = ({ boards, previews, rooms, handleJoin, roomID, socket }) => {\n  // the idea is to hold tempBoard and tempID in component state\n  // and hold the 'real' board and 'real' id in store\n  // store id and board will be updated on PLAY\n  // this allows me to not have to connect the home page\n  // to the store\n  const [tempBoard, setTempBoard] = useState(boards ? boards[0] : null);\n  const [tempRoomID, setTempRoomID] = useState(roomID);\n\n  const handleBoardClick = (i) => {\n    setTempBoard(boards[i]);\n  };\n\n  const handleRoomClick = (i) => {\n    // join room should not require board\n    handleJoin({\n      roomID: rooms[i],\n      board: [],\n    })\n  };\n\n  const handleChange = (e) => {\n    setTempRoomID(e.target.value);\n  };\n\n  return (\n    <div align=\"center\">\n      Room ID:\n      <input value={tempRoomID} onChange={handleChange} />\n      <JoinRoomButton\n        roomID={tempRoomID}\n        board={tempBoard}\n        handleJoin={handleJoin}\n      />\n      <Select\n        header={'Select Board'}\n        selections={previews}\n        onClick={handleBoardClick}\n        emptyMessage={'Waiting for boards fetch... ⌛'}\n      />\n      <Select\n        header={'Join Room'}\n        selections={rooms}\n        onClick={handleRoomClick}\n        emptyMessage={'There are no rooms 🥺 Make one or refresh!'}\n      />\n      <button\n        id=\"board-select-button\"\n        onClick={() => socket.emit(\"client:rooms/roomsRequested\")}\n      >\n        Refresh Rooms\n    </button>\n    </div >\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  boards: state.boards.boards,\n  previews: state.boards.previews,\n  rooms: state.rooms,\n})\n\nexport default connect(mapStateToProps)(HomePageDiv);\n","const graphQlApiUrl = 'http://157.245.254.196:3005/graphql';\n\nexport const graphQlPost = async (query) => {\n    const res = await fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n    })\n        .then(res => res.json())\n        .then(json => {\n            console.log(`response from ${query}: `, json.data)\n            return json.data;\n        })\n        .catch((err) => { console.error(err); });\n    return res;\n}\n\nexport const argsJsonStringify = (argsObject) => {\n    return argsObject\n        ? JSON.stringify(argsObject)\n            // removes quotes from keys\n            .replace(/\"([^\"]+)\":/g, '$1:')\n            .replace(\"{\", \"(\")\n            .replace(\"}\", \")\")\n        : \"\";\n}\n\nexport const fetchGraphQLData = (query) =>\n    (fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n\n    }).then(res => res.json())\n        .then(json => {\n            console.log(`response from ${query}: `, json.data);\n            return json.data;\n\n        }).catch((err) => { console.error(err); }));\n\n\nexport const getEmojis = async (argsObject = null) => {\n    const args = argsJsonStringify(argsObject);\n    // {getEmojis(group: \"Smileys & Emotion\"){emoji}}\n    const query = `\n        {\n            getEmojis${args}{\n                emoji\n            }\n        } \n    `;\n    const promiseResult = await fetchGraphQLData(query);\n    return promiseResult.getEmojis;\n    // return json.data.getEmojis;\n}\n\nexport const getBoards = async (query) => {\n    const boards = await fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query }),\n    })\n        .then(res => res.json())\n        .then(json => {\n            console.log(`response from ${query}: `, json.data.getBoards)\n            return json.data.getBoards;\n        })\n        .catch((err) => { console.error(err); });\n    return boards;\n}\n\nconst createBoard = async (mutation) => {\n    console.log(\"createBoard -> mutation\", mutation);\n    const board = await fetch(graphQlApiUrl, {\n        method: 'POST',\n        credentials: 'same-origin',\n        headers: {\n            'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ query: mutation }),\n    })\n        .then(res => res.json())\n        .then(json => {\n            console.log(`response from ${mutation}: `, json.data.getEmojis)\n            return json.data.getEmojis;\n        })\n        .catch((err) => { console.error(err); });\n    ;\n    return board;\n}\n\nexport const addGetEmojiResponseAsBoard = (array) =>\n    // the beginning of query\n    'mutation{createBoard(emojis: [\"'\n    // create array of emoji strings\n    + array.map(x => x.emoji)\n        // take only first 40 elements\n        .slice(80, 120)\n        // create a string with elements\n        .join('\",\"')\n    + '\"]){emojis}}';\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport HomePageDiv from \"./HomePageDiv\";\nimport { getEmojis } from \"./apiUtils\";\n// boards is a map where the key is name\n// it returns an object of {data, preview}\nimport \"./index.css\";\n\n\nconst HomePage = ({ handleJoin, roomID, randomSmiley, socket }) => {\n  return (\n    <div>\n      <h1 align=\"center\">{\"GUESSTIM\" + randomSmiley + \"JI\"}</h1>\n      <HomePageDiv handleJoin={handleJoin} roomID={roomID} socket={socket} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  randomSmiley: state.room.randomSmiley,\n})\n\nexport default connect(mapStateToProps)(HomePage);\n","import React from \"react\";\r\nconst RoomName = (props) => {\r\n  return (\r\n    <div>\r\n      <h3>Room Name: {props.roomID}</h3>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RoomName;\r\n","import React, { useState } from \"react\";\r\nfunction OpponentSquare(props) {\r\n  // note the use of jsx in onClick attribute and button content\r\n  const [squareVal, setSquareVal] = useState(props.value);\r\n  return <button className=\"opponent-square\">{props.value}</button>;\r\n}\r\n\r\nexport default OpponentSquare;\r\n","import React, { useState } from \"react\";\r\nimport OpponentSquare from \"./OpponentSquare\";\r\nimport { connect } from \"react-redux\";\r\nconst OpponentBoard = ({ socket, board, show }) => {\r\n  //const [freshBoard, setFreshBoard] = useState(easterEgg(props.room));\r\n\r\n  // it'll be way easier to have the second player submit the board I think,\r\n  // updating the board the other player has in Game\r\n  //socket.on(`setFreshBoard`, (newFreshBoard) => (setFreshBoard(newFreshBoard)));\r\n\r\n  const renderSquare = (i) => {\r\n    return <OpponentSquare index={i} value={show[i] ? board[i] : \"█\"} />;\r\n  };\r\n  return (\r\n    <div class=\"board\">\r\n      <div class=\"board-row\">\r\n        {renderSquare(28)}\r\n        {renderSquare(29)}\r\n        {renderSquare(30)}\r\n        {renderSquare(31)}\r\n        {renderSquare(32)}\r\n        {renderSquare(33)}\r\n        {renderSquare(34)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(21)}\r\n        {renderSquare(22)}\r\n        {renderSquare(23)}\r\n        {renderSquare(24)}\r\n        {renderSquare(25)}\r\n        {renderSquare(26)}\r\n        {renderSquare(27)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(14)}\r\n        {renderSquare(15)}\r\n        {renderSquare(16)}\r\n        {renderSquare(17)}\r\n        {renderSquare(18)}\r\n        {renderSquare(19)}\r\n        {renderSquare(20)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n        {renderSquare(9)}\r\n        {renderSquare(10)}\r\n        {renderSquare(11)}\r\n        {renderSquare(12)}\r\n        {renderSquare(13)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n        {renderSquare(6)}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  show: state.opponentBoard,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(OpponentBoard);\r\n","import React, { useState } from \"react\";\r\nfunction Square({ index, socket, value, onClick, onContextMenu }) {\r\n  // note the use of jsx in onClick attribute and button content\r\n  const [show, setShow] = useState(true);\r\n\r\n  return (\r\n    <button\r\n      className=\"square\"\r\n      onClick={\r\n        onClick\r\n          ? onClick\r\n          : () => {\r\n            setShow(!show);\r\n            socket.emit(\"client:opponentBoard/clicked\", index);\r\n          }\r\n      }\r\n      onContextMenu={(e) => {\r\n        e.preventDefault();\r\n        onContextMenu();\r\n      }}\r\n    >\r\n      {show ? value : '█'}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction PickTextBox({ pick }) {\r\n  return (\r\n    <button className=\"choice\">\r\n      {pick ? `You picked ${pick}.` : `Pick your emoji!`}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default PickTextBox;\r\n","import React, { useState } from \"react\";\r\nimport Square from \"./Square\";\r\nimport Choice from \"./PickTextBox\";\r\nimport { connect } from \"react-redux\";\r\nimport { playerPicked } from \"../redux/playersSlice\"\r\n\r\n// i'm hoping that when the client socket emits a request,\r\n// the server will be able to extract room information\r\n// and access gamedata hashtable with that\r\nconst Board = ({ socket, board, player, picked, playerPicked }) => {\r\n  //const [freshBoard, setFreshBoard] = useState(easterEgg(props.room));\r\n  // THE INITIAL VALUE OF STATE WILL BE ASSIGNED ONLY\r\n  // ON THE INITIAL RENDER\r\n  // IN SUBSEQUENT RENDERS, THE ARGUMENT OF USESTATE\r\n  // WILL BE IGNORED AND THE CURRENT VALUE WILL BE\r\n  // RETRIEVED\r\n  const [pick, setPick] = useState(\"\");\r\n\r\n  // with 2 boards, there is no reason to listen on the player's board\r\n  //socket.on(`setState`, (newSquares) => (setSquares(newSquares)));\r\n  //socket.on(`setFreshBoard`, (newFreshBoard) => (setFreshBoard(newFreshBoard)));\r\n  const handlePick = (i) => {\r\n    // saves typing this.state.\r\n    // can only change board if 2 players in room\r\n    // will need some 'original player' condition if I\r\n    // allow players to spectate\r\n    socket.emit(\"client:players/picked\", {\r\n      player: player,\r\n      pick: board[i],\r\n    });\r\n    playerPicked();\r\n    setPick(board[i]);\r\n  };\r\n  // this is a white space char, not a space\r\n  // a space causes shifting of rows\r\n\r\n  // sends a request to server to update board on click\r\n  // might make it return something to synchronize events\r\n  // emit to everyone in room but self\r\n  // set square field without server\r\n  //socket.emit(\"newState\", { squares: newSquares });\r\n  //setSquares(newSquares);\r\n\r\n  const handleContextMenu = (i) => {\r\n    navigator.clipboard.writeText(board[i]).then(\r\n      () => {\r\n        alert(board[i] + \" copied! Paste it in the board to guess!\");\r\n      },\r\n      () => {\r\n        alert(\"Couldn't copy emoji. Invalid permissions.\");\r\n      }\r\n    );\r\n  };\r\n\r\n  const renderSquare = (i) => {\r\n    return (\r\n      <Square\r\n        index={i}\r\n        socket={socket}\r\n        value={board[i]}\r\n        onClick={!picked ? () => handlePick(i) : null}\r\n        onContextMenu={() => {\r\n          handleContextMenu(i);\r\n        }}\r\n      />\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(0)}\r\n        {renderSquare(1)}\r\n        {renderSquare(2)}\r\n        {renderSquare(3)}\r\n        {renderSquare(4)}\r\n        {renderSquare(5)}\r\n        {renderSquare(6)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(7)}\r\n        {renderSquare(8)}\r\n        {renderSquare(9)}\r\n        {renderSquare(10)}\r\n        {renderSquare(11)}\r\n        {renderSquare(12)}\r\n        {renderSquare(13)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(14)}\r\n        {renderSquare(15)}\r\n        {renderSquare(16)}\r\n        {renderSquare(17)}\r\n        {renderSquare(18)}\r\n        {renderSquare(19)}\r\n        {renderSquare(20)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(21)}\r\n        {renderSquare(22)}\r\n        {renderSquare(23)}\r\n        {renderSquare(24)}\r\n        {renderSquare(25)}\r\n        {renderSquare(26)}\r\n        {renderSquare(27)}\r\n      </div>\r\n      <div class=\"board-row\">\r\n        {renderSquare(28)}\r\n        {renderSquare(29)}\r\n        {renderSquare(30)}\r\n        {renderSquare(31)}\r\n        {renderSquare(32)}\r\n        {renderSquare(33)}\r\n        {renderSquare(34)}\r\n      </div>\r\n      <div class=\"text-row\">\r\n        <Choice pick={pick} />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  picked: state.player,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  playerPicked,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Board);\r\n","export const playerReducer = (\n    state = false,\n    action\n) => {\n    switch (action.type) {\n        case \"player/picked\":\n            return true\n        case \"player/reset\":\n            return false;\n        default:\n            return state;\n    }\n};\n\nexport const playerPicked = () => ({\n    type: \"player/picked\",\n});","import React, { useState } from \"react\";\r\n\r\nconst PlayerTurn = ({ handleSubmitTurn, askingTurn }) => {\r\n  const [tempQuestion, setTempQuestion] = useState(\"\");\r\n  const onChange = (e) => {\r\n    setTempQuestion(e.target.value);\r\n  };\r\n  return askingTurn ? (\r\n    <div>\r\n      <input\r\n        onChange={onChange}\r\n        value={tempQuestion}\r\n        placeholder=\"Ask question or guess\"\r\n      />\r\n      <button\r\n        id=\"board-select-button\"\r\n        onClick={() => handleSubmitTurn(tempQuestion)}\r\n      >\r\n        SEND\r\n      </button>\r\n    </div>\r\n  ) : (\r\n    <div>\r\n      <button id=\"board-select-button\" onClick={() => handleSubmitTurn(\"Yes.\")}>\r\n        YES\r\n      </button>\r\n      <button id=\"board-select-button\" onClick={() => handleSubmitTurn(\"No.\")}>\r\n        NO\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PlayerTurn;\r\n","import React from \"react\";\r\nconst OpponentTurn = ({ opponent, askingTurn }) =>\r\n  askingTurn ? (\r\n    <div>{`Waiting for Player ${opponent} to ask...`}</div>\r\n  ) : (\r\n    <div>{`Waiting for Player ${opponent} to answer your question...`}</div>\r\n  );\r\n\r\nexport default OpponentTurn;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PlayerTurn from \"./PlayerTurn\";\r\nimport OpponentTurn from \"./OpponentTurn\";\r\n\r\nconst TurnHandler = ({\r\n  socket,\r\n  player,\r\n  picked,\r\n  turn,\r\n  roomID,\r\n  roomFull,\r\n  handleSubmitTurn,\r\n  winner,\r\n}) => {\r\n  // turn 1/2 is answering yes or no\r\n  // turn 2/2 is asking a question\r\n  // TURN CYCLE:\r\n  // player 2 turn 2/2  (turn 0)\r\n  // player 1 turn 1/2\r\n  // player 1 turn 2/2\r\n  // player 2 turn 1/2\r\n  const player1Turn = turn % 4 === 1 || turn % 4 === 2;\r\n  const player2Turn = !player1Turn;\r\n  const playerTurn =\r\n    (player === 1 && player1Turn) || (player === 2 && player2Turn);\r\n  const askingTurn = turn % 2 === 0;\r\n  const opponent = (player % 2) + 1;\r\n\r\n  // message can be populated with yes/no button or\r\n\r\n  // if send is available as soon as you join\r\n  // the gameLog room for player 2 will need to be updated when they join\r\n  if (winner) {\r\n    // need 'New Game' button which brings up board select for player 1\r\n    // need 'Waiting for Player 1 to start a new game...' for player 2\r\n    return <div>GAME OVER</div>;\r\n  } else if (!roomFull) {\r\n    return <div>Waiting for Player 2 to join...</div>;\r\n  } else if (!picked) {\r\n    return <div></div>;\r\n  } else {\r\n    return playerTurn ? (\r\n      <PlayerTurn handleSubmitTurn={handleSubmitTurn} askingTurn={askingTurn} />\r\n    ) : (\r\n        <OpponentTurn opponent={opponent} askingTurn={askingTurn} />\r\n      );\r\n  }\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  picked: state.player,\r\n});\r\n\r\nexport default connect(mapStateToProps, null)(TurnHandler);\r\n","export const gameLogReducer = (state = [], action) => {\r\n  console.log(\"in gameLog reducer\");\r\n  switch (action.type) {\r\n    case \"gameLog/cleared\":\r\n      return [];\r\n    case \"gameLog/turnSubmitted\":\r\n      return [action.payload, ...state];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\n// message is of the form :\r\n//    {username: 'Player 1', message: 'hi' }\r\nexport const turnSubmitted = (turnData) => ({\r\n  type: \"gameLog/turnSubmitted\",\r\n  payload: turnData,\r\n});\r\n\r\nexport const cleared = () => ({\r\n  type: \"gameLog/cleared\",\r\n});\r\n","import React, { useEffect, useState } from \"react\";\r\nimport TurnHandler from \"./TurnHandler\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { turnSubmitted } from \"../redux/gameLogSlice\";\r\n\r\nconst GameLog = ({ socket, roomID, roomFull, gameLog, player, winner }) => {\r\n  const opponent = (player % 2) + 1;\r\n  console.log(\"GameLog -> player\", player);\r\n  console.log(\"GameLog -> opponent\", opponent);\r\n  const dispatch = useDispatch();\r\n\r\n  const handleSubmitTurn = (untrimmedMessage) => {\r\n    const message = untrimmedMessage.trim();\r\n    socket.emit(\"client:gameLog/turnSubmitted\", {\r\n      player: player,\r\n      message: message,\r\n    });\r\n    dispatch(turnSubmitted({ username: \"You\", message: message }));\r\n  };\r\n\r\n  const renderGameLog = () => {\r\n    // the second argument of map is optional, takes in the index\r\n    // of the element\r\n    // don't use curly brace tuples that don't have tags!!\r\n    return gameLog.map(({ username: username, message: message }, i) => (\r\n      <div class={i === 0 ? 'game-log-last-message' : 'game-log-message'} key={i}>\r\n        <span>{username + ':'}</span>\r\n        <span>{message}</span>\r\n      </div>\r\n    ));\r\n  };\r\n  return (\r\n    <div>\r\n      <TurnHandler\r\n        socket={socket}\r\n        player={player}\r\n        turn={gameLog.length}\r\n        roomID={roomID}\r\n        roomFull={roomFull}\r\n        handleSubmitTurn={handleSubmitTurn}\r\n        winner={winner}\r\n      />\r\n      <div class=\"game-log-box\">{renderGameLog()}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  gameLog: state.gameLog,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  turnSubmitted,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GameLog);\r\n","import React, { Component, useEffect, useState } from \"react\";\r\nimport RoomName from \"./RoomName\";\r\nimport OpponentBoard from \"./OpponentBoard\";\r\nimport Board from \"./Board\";\r\nimport GameLog from \"./GameLog\";\r\nimport queryString from \"query-string\";\r\nimport socket from \"../socketlocal\";\r\nimport \"../index.css\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport { turnSubmitted, cleared } from \"../redux/gameLogSlice\";\r\nimport { clicked } from \"../redux/opponentBoardSlice\";\r\n//import socket from '../../socket';\r\n\r\n// This is the VIEW in MVC\r\n\r\n// props are a way of passing data from parent to child\r\n//      props are passed to the component\r\n// state is reserved for interactivity\r\n//      states are modified within the component\r\n\r\n// I can send requests with the root room\r\n// the response will go to the game specific room\r\n\r\n// I need to figure out how to pass down the values\r\nconst GamePage = ({\r\n  socket,\r\n  roomID,\r\n  roomFull,\r\n  board,\r\n  player,\r\n  gameCount,\r\n  winner,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  useEffect(() => {\r\n    if (roomFull) {\r\n      socket.on(\"server:gameLog/turnSubmitted\", (turnData) => {\r\n        dispatch(turnSubmitted(turnData));\r\n      });\r\n      socket.on(\"server:opponentBoard/clicked\", (index) => {\r\n        dispatch(clicked(index));\r\n      });\r\n    } else {\r\n      socket.off(\"server:gameLog/turnSubmitted\");\r\n      socket.off(\"server:opponentBoard/clicked\");\r\n    }\r\n  }, [roomFull]);\r\n  useEffect(() => {\r\n    socket.on(\"server:gameLog/cleared\", () => {\r\n      dispatch(cleared());\r\n    });\r\n  }, []);\r\n\r\n  // make sure that you check to see if you can import socket\r\n  // or have to pass it as prop\r\n  // the empty array tells useEffect to only run once\r\n\r\n  // state changes in a useEffect could cause an inf loop\r\n  /*\r\n  useEffect(() => {\r\n    if(socket.room !== roomQuery ){\r\n      socket.emit(\"subscribe\", roomQuery);\r\n      console.log(`Subscribed to ${socket.room} in useEffect`);\r\n    }\r\n  });\r\n  */\r\n\r\n  // the component will be mounted if the player number is found\r\n  return (\r\n    <div>\r\n      <div>\r\n        <RoomName roomID={roomID} />\r\n        <OpponentBoard board={board} socket={socket} roomID={roomID} />\r\n        <Board board={board} socket={socket} roomID={roomID} player={player} />\r\n        <GameLog\r\n          socket={socket}\r\n          roomID={roomID}\r\n          roomFull={roomFull}\r\n          player={player}\r\n          winner={winner}\r\n        />\r\n        {\r\n          // Need 'Leave Room' button\r\n        }\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n// there will need to be two boards\r\n// I chose squares to be a state because\r\n// I want the user to modify the board\r\n// Board\r\n//    states\r\n//        squares\r\n// if the onClick function is going to modify squares\r\n// it needs to be in the scope of Board\r\n// thus, it needs to be a prop of square\r\n// this is why I am not making Board a functional component\r\n// TODO : learn why it is bad to define functions\r\n//        inside functional components\r\n\r\n// OpponentBoard will listen and update remotely\r\n\r\n// Board will emit and update locally\r\n\r\n// Square\r\n//    props\r\n//      value\r\n//      onClick\r\n\r\nconst mapStateToProps = (state) => ({\r\n  ...state.room,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  turnSubmitted,\r\n  cleared,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamePage);\r\n","import io from \"socket.io-client\";\r\nlet socket = io(\"http://localhost:5000\");\r\nexport default socket;","export const opponentBoardReducer = (\r\n  state = new Array(35).fill(true),\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"opponentBoard/reset\":\r\n      return new Array(35).fill(true);\r\n    case \"opponentBoard/click\":\r\n      // try to do the (({})=>({}))(state) trick here\r\n      return state.map((x, i) => (i === action.payload ? !x : x));\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const clicked = (index) => ({\r\n  type: \"opponentBoard/click\",\r\n  payload: index,\r\n});\r\n\r\nexport const reset = () => ({ type: \"opponentBoard/reset\" });\r\n","import React from \"react\";\n\nfunction Footer() {\n  return (\n    <nav role='navigation' class=\"nav-table\">\n      <ul>\n        <li><a href=\"https://www.linkedin.com/in/tom-o-shaughnessy/\" target=\"_blank\">\n          <img src={\"./square-linkedin-512.png\"} width=\"30px\" height=\"auto\" />\n        </a>\n        </li>\n        <li><a href=\"https://github.com/tomoshaughnessy/guesstimoji\" target=\"_blank\">\n          <img src={\"./square-github.png\"} width=\"30px\" height=\"auto\" />\n        </a>\n        </li>\n        <li><a href=\"http://157.245.254.196:3005/graphql\" target=\"_blank\">\n          <img src={\"./square-graphql.png\"} width=\"30px\" height=\"auto\" />\n        </a>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Footer;","// this reducer handles updates to id, board, and roomFull\r\n// roomFull will decide to render gamePage\r\n// id and board will be passed to gamePage\r\nfunction makeid(length) {\r\n  var result = \"\";\r\n  var characters =\r\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\r\n  var charactersLength = characters.length;\r\n  for (var i = 0; i < length; i++) {\r\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\r\n  }\r\n  return result;\r\n}\r\n\r\nexport const roomReducer = (\r\n  state = {\r\n    roomID: makeid(5),\r\n    roomFull: false,\r\n    board: [],\r\n    randomSmiley: \"😎\"\r\n  },\r\n  action\r\n) => {\r\n  switch (action.type) {\r\n    case \"homePageLoaded\":\r\n      return {\r\n        ...state,\r\n        randomSmiley: action.payload,\r\n      }\r\n    case \"room/roomJoined\":\r\n      console.log(\"new state update game\", { ...state, ...action.payload });\r\n      return {\r\n        ...state,\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const roomJoined = (joinData) => {\r\n  console.log(\"roomJoined -> joinData\", joinData);\r\n  return {\r\n    type: \"room/roomJoined\",\r\n    payload: joinData,\r\n  };\r\n};\r\n\r\nexport const homePageLoaded = (emoji) => {\r\n  return {\r\n    type: \"homePageLoaded\",\r\n    payload: emoji,\r\n  }\r\n}\r\n","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport socket from \"./socket\";\n// import socket from \"./socketlocal\";\nimport HomePage from \"./home.page\";\nimport GamePage from \"./game/game.page\";\nimport Footer from \"./footer\";\nimport \"./index.css\";\nimport { connect } from \"react-redux\";\nimport { homePageLoaded, roomJoined } from \"./redux/roomSlice\";\nimport { getBoards, getEmojis, addGetEmojiResponseAsBoard, graphQlPost } from \"./apiUtils\";\nimport { gotBoards } from \"./redux/boardsSlice\";\nimport { gotRooms } from \"./redux/roomsSlice\";\n// view layer\n\n\n// handleJoin data should have both id and board selection\n\n// the first argument to a component is always the props obj\nconst App = ({ roomJoined, homePageLoaded, gotBoards, gotRooms, roomID, player }) => {\n  useEffect(() => {\n    getBoards('{getBoards{emojis}}')\n      .then((res) => res.map(x => x.emojis))\n      .then((boards) => { console.log(\"gotBoards\"); gotBoards(boards); })\n      .catch((err) => console.error(err));\n    getEmojis({ group: \"Smileys & Emotion\" })\n      .then(array => array.map(x => x.emoji))\n      .then(array => homePageLoaded(array[Math.floor(Math.random() * array.length)]))\n      .catch((err) => { homePageLoaded(\"❌\"); console.error(err); });\n    socket.emit(\"client:rooms/roomsRequested\");\n    socket.on(\"server:rooms/roomsResponded\", (rooms) => {\n      console.log('rooms responded');\n      gotRooms(rooms);\n    });\n  }, []);\n  /*\n  // add boards\n  useEffect(() => {\n    getEmojis({ group: \"Animals & Nature\" }).then((arr) => addGetEmojiResponseAsBoard(arr)).then((str) => graphQlPost(str));\n  }, []);\n  */\n  useEffect(() => {\n    console.log('QUERY TEST:', getEmojis({ group: \"Animals & Nature\" }));\n  }, []);\n  const handleJoin = (joinData) => {\n    console.log(\"handleJoin -> joinData\", joinData);\n    socket.emit(\"client:room/roomJoined\", joinData);\n    socket.on(\"server:room/roomJoined\", (joinData) => {\n      if (joinData) {\n        roomJoined(joinData);\n      } else {\n        return;\n      }\n    });\n  };\n  return (\n    <div className=\"App\" align=\"center\">\n      {\n        // player should only be defined if you're in a room\n        // might wanna turn this into a switch statement\n        // page state = {home, game, find}\n        player ?\n          <GamePage socket={socket} /> :\n          <HomePage handleJoin={handleJoin} roomID={roomID} socket={socket} />\n      }\n      <Footer />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => ({\n  roomID: state.room.roomID,\n  player: state.room.player,\n});\n\n// actions : {type: TYPE, ...} ARE OBJECTS\n// actionCreators : (obj) => {...action, ...obj} RETURN ACTIONS\n// mapDispatchToProps will redefine actionCreators as such:\n//      actionCreator(e) = dispatch(actionCreator(e))\n// dispatch will give the new action to the reducer who can access state\n// reducers : (state, action) => state'\n\n// in order for Redux to wrap dispatch around roomJoined,\n// it needs to be passed as a prop\nconst mapDispatchToProps = {\n  roomJoined,\n  gotBoards,\n  gotRooms,\n  homePageLoaded,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","export const boardsReducer = (\n  state = {\n    boards: [\n      ['🤣', '😂', '🙂', '😄', '🙃', '😊',\n        '😉', '😇', '😍', '🥰', '🤩', '😃',\n        '😅', '😁', '😆', '😗', '😀', '😚',\n        '☺️', '☺', '😙', '🥲', '😋', '😛',\n        '😘', '😜', '🤪', '😝', '🤑', '🤗',\n        '🤭', '🤫', '🤔', '🤐', '🤨', '😐',\n        '😑', '😶', '😏', '😒',],\n    ],\n    previews: [],\n  },\n  action\n) => {\n  // action.payload is an array of arrays of 40 emojis\n  switch (action.type) {\n    case \"gotBoards\":\n      return {\n        ...state,\n        boards: action.payload,\n        previews: action.payload.map(x => {\n          let retVal = ``;\n          var i;\n          // this is used to join the emojis\n          // instead of .join because some emojis combine\n          // two unicode characters\n          for (i in x) {\n            // the white space between displays combinations correctly\n            retVal += x[i] + ` `;\n          }\n          return retVal;\n        }),\n      }\n    default:\n      return state;\n  }\n};\n\nexport const gotBoards = (boards) => ({\n  type: \"gotBoards\",\n  payload: boards,\n});\n","export const roomsReducer = (\n  state = [],\n  action\n) => {\n  // action.payload is an array of arrays of 40 emojis\n  switch (action.type) {\n    case \"gotRooms\":\n      // don't want to spread array here bc not saving \n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport const gotRooms = (rooms) => ({\n  type: \"gotRooms\",\n  payload: rooms,\n});\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import { createStore, combineReducers } from \"redux\";\nimport { roomReducer } from \"./roomSlice\";\nimport { gameLogReducer } from \"./gameLogSlice\";\nimport { opponentBoardReducer } from \"./opponentBoardSlice\";\nimport { playerReducer } from \"./playersSlice\";\nimport { boardsReducer } from \"./boardsSlice\";\nimport { roomsReducer } from \"./roomsSlice\";\n\n// by default switch cases, combineReducers returns the state tree:\n// {gameLog: [...], app:{...}}\nconst rootReducer = combineReducers({\n  room: roomReducer,\n  gameLog: gameLogReducer,\n  opponentBoard: opponentBoardReducer,\n  player: playerReducer,\n  boards: boardsReducer,\n  rooms: roomsReducer,\n});\n\nconst store = createStore(\n  rootReducer,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n// create-react-app (CRA) use\r\nimport store from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}